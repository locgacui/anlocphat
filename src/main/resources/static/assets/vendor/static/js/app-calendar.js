/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/app-calendar.js":
/*!***********************************!*\
  !*** ./static/js/app-calendar.js ***!
  \***********************************/
/***/ (function() {

eval("/**\n * App Calendar\n */\n\n/**\n * ! If both start and end dates are same Full calendar will nullify the end date value.\n * ! Full calendar will end the event on a day before at 12:00:00AM thus, event won't extend to the end date.\n * ! We are getting events from a separate file named app-calendar-events.js. You can add or remove events from there.\n *\n **/\n\n\n\nvar direction = 'ltr';\nif (isRtl) {\n  direction = 'rtl';\n}\ndocument.addEventListener('DOMContentLoaded', function () {\n  (function () {\n    var calendarEl = document.getElementById('calendar'),\n      appCalendarSidebar = document.querySelector('.app-calendar-sidebar'),\n      addEventSidebar = document.getElementById('addEventSidebar'),\n      appOverlay = document.querySelector('.app-overlay'),\n      calendarsColor = {\n        Business: 'primary',\n        Holiday: 'success',\n        Personal: 'danger',\n        Family: 'warning',\n        ETC: 'info'\n      },\n      offcanvasTitle = document.querySelector('.offcanvas-title'),\n      btnToggleSidebar = document.querySelector('.btn-toggle-sidebar'),\n      btnSubmit = document.querySelector('button[type=\"submit\"]'),\n      btnDeleteEvent = document.querySelector('.btn-delete-event'),\n      btnCancel = document.querySelector('.btn-cancel'),\n      eventTitle = document.querySelector('#eventTitle'),\n      eventStartDate = document.querySelector('#eventStartDate'),\n      eventEndDate = document.querySelector('#eventEndDate'),\n      eventUrl = document.querySelector('#eventURL'),\n      eventLabel = $('#eventLabel'),\n      // ! Using jquery vars due to select2 jQuery dependency\n      eventGuests = $('#eventGuests'),\n      // ! Using jquery vars due to select2 jQuery dependency\n      eventLocation = document.querySelector('#eventLocation'),\n      eventDescription = document.querySelector('#eventDescription'),\n      allDaySwitch = document.querySelector('.allDay-switch'),\n      selectAll = document.querySelector('.select-all'),\n      filterInput = [].slice.call(document.querySelectorAll('.input-filter')),\n      inlineCalendar = document.querySelector('.inline-calendar');\n    var eventToUpdate,\n      currentEvents = events,\n      // Assign app-calendar-events.js file events (assume events from API) to currentEvents (browser store/object) to manage and update calender events\n      isFormValid = false,\n      inlineCalInstance;\n\n    // Init event Offcanvas\n    var bsAddEventSidebar = new bootstrap.Offcanvas(addEventSidebar);\n\n    //! TODO: Update Event label and guest code to JS once select removes jQuery dependency\n    // Event Label (select2)\n    if (eventLabel.length) {\n      var renderBadges = function renderBadges(option) {\n        if (!option.id) {\n          return option.text;\n        }\n        var $badge = \"<span class='badge badge-dot bg-\" + $(option.element).data('label') + \" me-2'> \" + '</span>' + option.text;\n        return $badge;\n      };\n      eventLabel.wrap('<div class=\"position-relative\"></div>').select2({\n        placeholder: 'Select value',\n        dropdownParent: eventLabel.parent(),\n        templateResult: renderBadges,\n        templateSelection: renderBadges,\n        minimumResultsForSearch: -1,\n        escapeMarkup: function escapeMarkup(es) {\n          return es;\n        }\n      });\n    }\n\n    // Event Guests (select2)\n    if (eventGuests.length) {\n      var renderGuestAvatar = function renderGuestAvatar(option) {\n        if (!option.id) {\n          return option.text;\n        }\n        var $avatar = \"<div class='d-flex flex-wrap align-items-center'>\" + \"<div class='avatar avatar-xs me-2'>\" + \"<img src='\" + assetsPath + 'img/avatars/' + $(option.element).data('avatar') + \"' alt='avatar' class='rounded-circle' />\" + '</div>' + option.text + '</div>';\n        return $avatar;\n      };\n      eventGuests.wrap('<div class=\"position-relative\"></div>').select2({\n        placeholder: 'Select value',\n        dropdownParent: eventGuests.parent(),\n        closeOnSelect: false,\n        templateResult: renderGuestAvatar,\n        templateSelection: renderGuestAvatar,\n        escapeMarkup: function escapeMarkup(es) {\n          return es;\n        }\n      });\n    }\n\n    // Event start (flatpicker)\n    if (eventStartDate) {\n      var start = eventStartDate.flatpickr({\n        enableTime: true,\n        altFormat: 'Y-m-dTH:i:S',\n        onReady: function onReady(selectedDates, dateStr, instance) {\n          if (instance.isMobile) {\n            instance.mobileInput.setAttribute('step', null);\n          }\n        }\n      });\n    }\n\n    // Event end (flatpicker)\n    if (eventEndDate) {\n      var end = eventEndDate.flatpickr({\n        enableTime: true,\n        altFormat: 'Y-m-dTH:i:S',\n        onReady: function onReady(selectedDates, dateStr, instance) {\n          if (instance.isMobile) {\n            instance.mobileInput.setAttribute('step', null);\n          }\n        }\n      });\n    }\n\n    // Inline sidebar calendar (flatpicker)\n    if (inlineCalendar) {\n      inlineCalInstance = inlineCalendar.flatpickr({\n        monthSelectorType: 'static',\n        inline: true\n      });\n    }\n\n    // Event click function\n    function _eventClick(info) {\n      eventToUpdate = info.event;\n      if (eventToUpdate.url) {\n        info.jsEvent.preventDefault();\n        window.open(eventToUpdate.url, '_blank');\n      }\n      bsAddEventSidebar.show();\n      // For update event set offcanvas title text: Update Event\n      if (offcanvasTitle) {\n        offcanvasTitle.innerHTML = 'Update Event';\n      }\n      btnSubmit.innerHTML = 'Update';\n      btnSubmit.classList.add('btn-update-event');\n      btnSubmit.classList.remove('btn-add-event');\n      btnDeleteEvent.classList.remove('d-none');\n      eventTitle.value = eventToUpdate.title;\n      start.setDate(eventToUpdate.start, true, 'Y-m-d');\n      eventToUpdate.allDay === true ? allDaySwitch.checked = true : allDaySwitch.checked = false;\n      eventToUpdate.end !== null ? end.setDate(eventToUpdate.end, true, 'Y-m-d') : end.setDate(eventToUpdate.start, true, 'Y-m-d');\n      eventLabel.val(eventToUpdate.extendedProps.calendar).trigger('change');\n      eventToUpdate.extendedProps.location !== undefined ? eventLocation.value = eventToUpdate.extendedProps.location : null;\n      eventToUpdate.extendedProps.guests !== undefined ? eventGuests.val(eventToUpdate.extendedProps.guests).trigger('change') : null;\n      eventToUpdate.extendedProps.description !== undefined ? eventDescription.value = eventToUpdate.extendedProps.description : null;\n\n      // // Call removeEvent function\n      // btnDeleteEvent.addEventListener('click', e => {\n      //   removeEvent(parseInt(eventToUpdate.id));\n      //   // eventToUpdate.remove();\n      //   bsAddEventSidebar.hide();\n      // });\n    }\n\n    // Modify sidebar toggler\n    function modifyToggler() {\n      var fcSidebarToggleButton = document.querySelector('.fc-sidebarToggle-button');\n      fcSidebarToggleButton.classList.remove('fc-button-primary');\n      fcSidebarToggleButton.classList.add('d-lg-none', 'd-inline-block', 'ps-0');\n      while (fcSidebarToggleButton.firstChild) {\n        fcSidebarToggleButton.firstChild.remove();\n      }\n      fcSidebarToggleButton.setAttribute('data-bs-toggle', 'sidebar');\n      fcSidebarToggleButton.setAttribute('data-overlay', '');\n      fcSidebarToggleButton.setAttribute('data-target', '#app-calendar-sidebar');\n      fcSidebarToggleButton.insertAdjacentHTML('beforeend', '<i class=\"bx bx-menu bx-sm text-heading\"></i>');\n    }\n\n    // Filter events by calender\n    function selectedCalendars() {\n      var selected = [],\n        filterInputChecked = [].slice.call(document.querySelectorAll('.input-filter:checked'));\n      filterInputChecked.forEach(function (item) {\n        selected.push(item.getAttribute('data-value'));\n      });\n      return selected;\n    }\n\n    // --------------------------------------------------------------------------------------------------\n    // AXIOS: fetchEvents\n    // * This will be called by fullCalendar to fetch events. Also this can be used to refetch events.\n    // --------------------------------------------------------------------------------------------------\n    function fetchEvents(info, successCallback) {\n      // Fetch Events from API endpoint reference\n      /* $.ajax(\n        {\n          url: '../../../app-assets/data/app-calendar-events.js',\n          type: 'GET',\n          success: function (result) {\n            // Get requested calendars as Array\n            var calendars = selectedCalendars();\n             return [result.events.filter(event => calendars.includes(event.extendedProps.calendar))];\n          },\n          error: function (error) {\n            console.log(error);\n          }\n        }\n      ); */\n\n      var calendars = selectedCalendars();\n      // We are reading event object from app-calendar-events.js file directly by including that file above app-calendar file.\n      // You should make an API call, look into above commented API call for reference\n      var selectedEvents = currentEvents.filter(function (event) {\n        // console.log(event.extendedProps.calendar.toLowerCase());\n        return calendars.includes(event.extendedProps.calendar.toLowerCase());\n      });\n      // if (selectedEvents.length > 0) {\n      successCallback(selectedEvents);\n      // }\n    }\n\n    // Init FullCalendar\n    // ------------------------------------------------\n    var calendar = new Calendar(calendarEl, {\n      initialView: 'dayGridMonth',\n      events: fetchEvents,\n      plugins: [dayGridPlugin, interactionPlugin, listPlugin, timegridPlugin],\n      editable: true,\n      dragScroll: true,\n      dayMaxEvents: 2,\n      eventResizableFromStart: true,\n      customButtons: {\n        sidebarToggle: {\n          text: 'Sidebar'\n        }\n      },\n      headerToolbar: {\n        start: 'sidebarToggle, prev,next, title',\n        end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n      },\n      direction: direction,\n      initialDate: new Date(),\n      navLinks: true,\n      // can click day/week names to navigate views\n      eventClassNames: function eventClassNames(_ref) {\n        var calendarEvent = _ref.event;\n        var colorName = calendarsColor[calendarEvent._def.extendedProps.calendar];\n        // Background Color\n        return ['fc-event-' + colorName];\n      },\n      dateClick: function dateClick(info) {\n        var date = moment(info.date).format('YYYY-MM-DD');\n        resetValues();\n        bsAddEventSidebar.show();\n\n        // For new event set offcanvas title text: Add Event\n        if (offcanvasTitle) {\n          offcanvasTitle.innerHTML = 'Add Event';\n        }\n        btnSubmit.innerHTML = 'Add';\n        btnSubmit.classList.remove('btn-update-event');\n        btnSubmit.classList.add('btn-add-event');\n        btnDeleteEvent.classList.add('d-none');\n        eventStartDate.value = date;\n        eventEndDate.value = date;\n      },\n      eventClick: function eventClick(info) {\n        _eventClick(info);\n      },\n      datesSet: function datesSet() {\n        modifyToggler();\n      },\n      viewDidMount: function viewDidMount() {\n        modifyToggler();\n      }\n    });\n\n    // Render calendar\n    calendar.render();\n    // Modify sidebar toggler\n    modifyToggler();\n    var eventForm = document.getElementById('eventForm');\n    var fv = FormValidation.formValidation(eventForm, {\n      fields: {\n        eventTitle: {\n          validators: {\n            notEmpty: {\n              message: 'Please enter event title '\n            }\n          }\n        },\n        eventStartDate: {\n          validators: {\n            notEmpty: {\n              message: 'Please enter start date '\n            }\n          }\n        },\n        eventEndDate: {\n          validators: {\n            notEmpty: {\n              message: 'Please enter end date '\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap5: new FormValidation.plugins.Bootstrap5({\n          // Use this for enabling/changing valid/invalid class\n          eleValidClass: '',\n          rowSelector: function rowSelector(field, ele) {\n            // field is the field name & ele is the field element\n            return '.mb-3';\n          }\n        }),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        // Submit the form when all fields are valid\n        // defaultSubmit: new FormValidation.plugins.DefaultSubmit(),\n        autoFocus: new FormValidation.plugins.AutoFocus()\n      }\n    }).on('core.form.valid', function () {\n      // Jump to the next step when all fields in the current step are valid\n      isFormValid = true;\n    }).on('core.form.invalid', function () {\n      // if fields are invalid\n      isFormValid = false;\n    });\n\n    // Sidebar Toggle Btn\n    if (btnToggleSidebar) {\n      btnToggleSidebar.addEventListener('click', function (e) {\n        btnCancel.classList.remove('d-none');\n      });\n    }\n\n    // Add Event\n    // ------------------------------------------------\n    function addEvent(eventData) {\n      // ? Add new event data to current events object and refetch it to display on calender\n      // ? You can write below code to AJAX call success response\n\n      currentEvents.push(eventData);\n      calendar.refetchEvents();\n\n      // ? To add event directly to calender (won't update currentEvents object)\n      // calendar.addEvent(eventData);\n    }\n\n    // Update Event\n    // ------------------------------------------------\n    function updateEvent(eventData) {\n      // ? Update existing event data to current events object and refetch it to display on calender\n      // ? You can write below code to AJAX call success response\n      eventData.id = parseInt(eventData.id);\n      currentEvents[currentEvents.findIndex(function (el) {\n        return el.id === eventData.id;\n      })] = eventData; // Update event by id\n      calendar.refetchEvents();\n\n      // ? To update event directly to calender (won't update currentEvents object)\n      // let propsToUpdate = ['id', 'title', 'url'];\n      // let extendedPropsToUpdate = ['calendar', 'guests', 'location', 'description'];\n\n      // updateEventInCalendar(eventData, propsToUpdate, extendedPropsToUpdate);\n    }\n\n    // Remove Event\n    // ------------------------------------------------\n\n    function removeEvent(eventId) {\n      // ? Delete existing event data to current events object and refetch it to display on calender\n      // ? You can write below code to AJAX call success response\n      currentEvents = currentEvents.filter(function (event) {\n        return event.id != eventId;\n      });\n      calendar.refetchEvents();\n\n      // ? To delete event directly to calender (won't update currentEvents object)\n      // removeEventInCalendar(eventId);\n    }\n\n    // (Update Event In Calendar (UI Only)\n    // ------------------------------------------------\n    var updateEventInCalendar = function updateEventInCalendar(updatedEventData, propsToUpdate, extendedPropsToUpdate) {\n      var existingEvent = calendar.getEventById(updatedEventData.id);\n\n      // --- Set event properties except date related ----- //\n      // ? Docs: https://fullcalendar.io/docs/Event-setProp\n      // dateRelatedProps => ['start', 'end', 'allDay']\n      // eslint-disable-next-line no-plusplus\n      for (var index = 0; index < propsToUpdate.length; index++) {\n        var propName = propsToUpdate[index];\n        existingEvent.setProp(propName, updatedEventData[propName]);\n      }\n\n      // --- Set date related props ----- //\n      // ? Docs: https://fullcalendar.io/docs/Event-setDates\n      existingEvent.setDates(updatedEventData.start, updatedEventData.end, {\n        allDay: updatedEventData.allDay\n      });\n\n      // --- Set event's extendedProps ----- //\n      // ? Docs: https://fullcalendar.io/docs/Event-setExtendedProp\n      // eslint-disable-next-line no-plusplus\n      for (var index = 0; index < extendedPropsToUpdate.length; index++) {\n        var propName = extendedPropsToUpdate[index];\n        existingEvent.setExtendedProp(propName, updatedEventData.extendedProps[propName]);\n      }\n    };\n\n    // Remove Event In Calendar (UI Only)\n    // ------------------------------------------------\n    function removeEventInCalendar(eventId) {\n      calendar.getEventById(eventId).remove();\n    }\n\n    // Add new event\n    // ------------------------------------------------\n    btnSubmit.addEventListener('click', function (e) {\n      if (btnSubmit.classList.contains('btn-add-event')) {\n        if (isFormValid) {\n          var newEvent = {\n            id: calendar.getEvents().length + 1,\n            title: eventTitle.value,\n            start: eventStartDate.value,\n            end: eventEndDate.value,\n            startStr: eventStartDate.value,\n            endStr: eventEndDate.value,\n            display: 'block',\n            extendedProps: {\n              location: eventLocation.value,\n              guests: eventGuests.val(),\n              calendar: eventLabel.val(),\n              description: eventDescription.value\n            }\n          };\n          if (eventUrl.value) {\n            newEvent.url = eventUrl.value;\n          }\n          if (allDaySwitch.checked) {\n            newEvent.allDay = true;\n          }\n          addEvent(newEvent);\n          bsAddEventSidebar.hide();\n        }\n      } else {\n        // Update event\n        // ------------------------------------------------\n        if (isFormValid) {\n          var eventData = {\n            id: eventToUpdate.id,\n            title: eventTitle.value,\n            start: eventStartDate.value,\n            end: eventEndDate.value,\n            url: eventUrl.value,\n            extendedProps: {\n              location: eventLocation.value,\n              guests: eventGuests.val(),\n              calendar: eventLabel.val(),\n              description: eventDescription.value\n            },\n            display: 'block',\n            allDay: allDaySwitch.checked ? true : false\n          };\n          updateEvent(eventData);\n          bsAddEventSidebar.hide();\n        }\n      }\n    });\n\n    // Call removeEvent function\n    btnDeleteEvent.addEventListener('click', function (e) {\n      removeEvent(parseInt(eventToUpdate.id));\n      // eventToUpdate.remove();\n      bsAddEventSidebar.hide();\n    });\n\n    // Reset event form inputs values\n    // ------------------------------------------------\n    function resetValues() {\n      eventEndDate.value = '';\n      eventUrl.value = '';\n      eventStartDate.value = '';\n      eventTitle.value = '';\n      eventLocation.value = '';\n      allDaySwitch.checked = false;\n      eventGuests.val('').trigger('change');\n      eventDescription.value = '';\n    }\n\n    // When modal hides reset input values\n    addEventSidebar.addEventListener('hidden.bs.offcanvas', function () {\n      resetValues();\n    });\n\n    // Hide left sidebar if the right sidebar is open\n    btnToggleSidebar.addEventListener('click', function (e) {\n      if (offcanvasTitle) {\n        offcanvasTitle.innerHTML = 'Add Event';\n      }\n      btnSubmit.innerHTML = 'Add';\n      btnSubmit.classList.remove('btn-update-event');\n      btnSubmit.classList.add('btn-add-event');\n      btnDeleteEvent.classList.add('d-none');\n      appCalendarSidebar.classList.remove('show');\n      appOverlay.classList.remove('show');\n    });\n\n    // Calender filter functionality\n    // ------------------------------------------------\n    if (selectAll) {\n      selectAll.addEventListener('click', function (e) {\n        if (e.currentTarget.checked) {\n          document.querySelectorAll('.input-filter').forEach(function (c) {\n            return c.checked = 1;\n          });\n        } else {\n          document.querySelectorAll('.input-filter').forEach(function (c) {\n            return c.checked = 0;\n          });\n        }\n        calendar.refetchEvents();\n      });\n    }\n    if (filterInput) {\n      filterInput.forEach(function (item) {\n        item.addEventListener('click', function () {\n          document.querySelectorAll('.input-filter:checked').length < document.querySelectorAll('.input-filter').length ? selectAll.checked = false : selectAll.checked = true;\n          calendar.refetchEvents();\n        });\n      });\n    }\n\n    // Jump to date on sidebar(inline) calendar change\n    inlineCalInstance.config.onChange.push(function (date) {\n      calendar.changeView(calendar.view.type, moment(date[0]).format('YYYY-MM-DD'));\n      modifyToggler();\n      appCalendarSidebar.classList.remove('show');\n      appOverlay.classList.remove('show');\n    });\n  })();\n});\n\n//# sourceURL=webpack://Sneat/./static/js/app-calendar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/app-calendar.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});