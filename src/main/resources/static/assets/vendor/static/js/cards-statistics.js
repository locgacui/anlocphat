/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/cards-statistics.js":
/*!***************************************!*\
  !*** ./static/js/cards-statistics.js ***!
  \***************************************/
/***/ (function() {

eval("/**\n * Statistics Cards\n */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n(function () {\n  var cardColor, shadeColor, labelColor, headingColor;\n  if (isDarkStyle) {\n    cardColor = config.colors_dark.cardColor;\n    labelColor = config.colors_dark.textMuted;\n    headingColor = config.colors_dark.headingColor;\n    shadeColor = 'dark';\n  } else {\n    cardColor = config.colors.cardColor;\n    labelColor = config.colors.textMuted;\n    headingColor = config.colors.headingColor;\n    shadeColor = '';\n  }\n\n  // Donut Chart Colors\n  var chartColors = {\n    donut: {\n      series1: config.colors.success,\n      series2: '#99E570',\n      series3: '#B5EC97',\n      series4: '#E3F8D7'\n    }\n  };\n\n  // Order Area Chart\n  // --------------------------------------------------------------------\n  var orderAreaChartEl = document.querySelector('#orderChart'),\n    orderAreaChartConfig = {\n      chart: {\n        height: 80,\n        type: 'area',\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      markers: {\n        size: 6,\n        colors: 'transparent',\n        strokeColors: 'transparent',\n        strokeWidth: 4,\n        discrete: [{\n          fillColor: cardColor,\n          seriesIndex: 0,\n          dataPointIndex: 6,\n          strokeColor: config.colors.success,\n          strokeWidth: 2,\n          size: 6,\n          radius: 8\n        }],\n        hover: {\n          size: 7\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          right: 8\n        }\n      },\n      colors: [config.colors.success],\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shade: shadeColor,\n          shadeIntensity: 0.8,\n          opacityFrom: 0.8,\n          opacityTo: 0.25,\n          stops: [0, 85, 100]\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 2,\n        curve: 'smooth'\n      },\n      series: [{\n        data: [180, 175, 275, 140, 205, 190, 295]\n      }],\n      xaxis: {\n        show: false,\n        lines: {\n          show: false\n        },\n        labels: {\n          show: false\n        },\n        stroke: {\n          width: 0\n        },\n        axisBorder: {\n          show: false\n        }\n      },\n      yaxis: {\n        stroke: {\n          width: 0\n        },\n        show: false\n      }\n    };\n  if (_typeof(orderAreaChartEl) !== undefined && orderAreaChartEl !== null) {\n    var orderAreaChart = new ApexCharts(orderAreaChartEl, orderAreaChartConfig);\n    orderAreaChart.render();\n  }\n\n  // Revenue Bar Chart\n  // --------------------------------------------------------------------\n  var revenueBarChartEl = document.querySelector('#revenueChart'),\n    revenueBarChartConfig = {\n      chart: {\n        height: 80,\n        type: 'bar',\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          barHeight: '80%',\n          columnWidth: '75%',\n          startingShape: 'rounded',\n          endingShape: 'rounded',\n          borderRadius: 2,\n          distributed: true\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          top: -20,\n          bottom: -12,\n          left: -10,\n          right: 0\n        }\n      },\n      colors: [config.colors_label.primary, config.colors_label.primary, config.colors_label.primary, config.colors_label.primary, config.colors.primary, config.colors_label.primary, config.colors_label.primary],\n      dataLabels: {\n        enabled: false\n      },\n      series: [{\n        data: [40, 95, 60, 45, 90, 50, 75]\n      }],\n      legend: {\n        show: false\n      },\n      xaxis: {\n        categories: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false\n        }\n      }\n    };\n  if (_typeof(revenueBarChartEl) !== undefined && revenueBarChartEl !== null) {\n    var revenueBarChart = new ApexCharts(revenueBarChartEl, revenueBarChartConfig);\n    revenueBarChart.render();\n  }\n\n  // Profit Bar Chart\n  // --------------------------------------------------------------------\n  var profitBarChartEl = document.querySelector('#profitChart'),\n    profitBarChartConfig = {\n      series: [{\n        data: [58, 28, 50, 80]\n      }, {\n        data: [50, 22, 65, 72]\n      }],\n      chart: {\n        type: 'bar',\n        height: 90,\n        toolbar: {\n          tools: {\n            download: false\n          }\n        }\n      },\n      plotOptions: {\n        bar: {\n          columnWidth: '65%',\n          startingShape: 'rounded',\n          endingShape: 'rounded',\n          borderRadius: 3,\n          dataLabels: {\n            show: false\n          }\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          top: -30,\n          bottom: -12,\n          left: -10,\n          right: 0\n        }\n      },\n      colors: [config.colors.success, config.colors_label.success],\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 5,\n        colors: cardColor\n      },\n      legend: {\n        show: false\n      },\n      xaxis: {\n        categories: ['Jan', 'Apr', 'Jul', 'Oct'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false\n        }\n      }\n    };\n  if (_typeof(profitBarChartEl) !== undefined && profitBarChartEl !== null) {\n    var profitBarChart = new ApexCharts(profitBarChartEl, profitBarChartConfig);\n    profitBarChart.render();\n  }\n\n  // Session Area Chart\n  // --------------------------------------------------------------------\n  var sessionAreaChartEl = document.querySelector('#sessionsChart'),\n    sessionAreaChartConfig = {\n      chart: {\n        height: 90,\n        type: 'area',\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      markers: {\n        size: 6,\n        colors: 'transparent',\n        strokeColors: 'transparent',\n        strokeWidth: 4,\n        discrete: [{\n          fillColor: cardColor,\n          seriesIndex: 0,\n          dataPointIndex: 8,\n          strokeColor: config.colors.warning,\n          strokeWidth: 2,\n          size: 6,\n          radius: 8\n        }],\n        hover: {\n          size: 7\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          right: 8\n        }\n      },\n      colors: [config.colors.warning],\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shade: shadeColor,\n          shadeIntensity: 0.8,\n          opacityFrom: 0.8,\n          opacityTo: 0.25,\n          stops: [0, 95, 100]\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 2,\n        curve: 'straight'\n      },\n      series: [{\n        data: [280, 280, 240, 240, 200, 200, 260, 260, 310]\n      }],\n      xaxis: {\n        show: false,\n        lines: {\n          show: false\n        },\n        labels: {\n          show: false\n        },\n        axisBorder: {\n          show: false\n        }\n      },\n      yaxis: {\n        show: false\n      }\n    };\n  if (_typeof(sessionAreaChartEl) !== undefined && sessionAreaChartEl !== null) {\n    var sessionAreaChart = new ApexCharts(sessionAreaChartEl, sessionAreaChartConfig);\n    sessionAreaChart.render();\n  }\n\n  // Total Sales Radial Bar Chart\n  // --------------------------------------------------------------------\n  var expensesRadialChartEl = document.querySelector('#expensesChart'),\n    expensesRadialChartConfig = {\n      chart: {\n        sparkline: {\n          enabled: true\n        },\n        parentHeightOffset: 0,\n        type: 'radialBar'\n      },\n      colors: [config.colors.primary],\n      series: [78],\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            size: '65%'\n          },\n          track: {\n            background: config.colors_label.secondary\n          },\n          dataLabels: {\n            name: {\n              show: false\n            },\n            value: {\n              fontSize: '22px',\n              color: headingColor,\n              fontWeight: 500,\n              offsetY: 0\n            }\n          }\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          left: -10,\n          right: -10\n        }\n      },\n      stroke: {\n        lineCap: 'round'\n      },\n      labels: ['Progress']\n    };\n  if (_typeof(expensesRadialChartEl) !== undefined && expensesRadialChartEl !== null) {\n    var expensesRadialChart = new ApexCharts(expensesRadialChartEl, expensesRadialChartConfig);\n    expensesRadialChart.render();\n  }\n\n  // Visitor Bar Chart\n  // --------------------------------------------------------------------\n  var visitorBarChartEl = document.querySelector('#visitorsChart'),\n    visitorBarChartConfig = {\n      chart: {\n        height: 120,\n        width: 200,\n        parentHeightOffset: 0,\n        type: 'bar',\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          barHeight: '75%',\n          columnWidth: '40px',\n          startingShape: 'rounded',\n          endingShape: 'rounded',\n          borderRadius: 5,\n          distributed: true\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          top: -25,\n          bottom: -12\n        }\n      },\n      colors: [config.colors_label.primary, config.colors_label.primary, config.colors_label.primary, config.colors_label.primary, config.colors_label.primary, config.colors.primary, config.colors_label.primary],\n      dataLabels: {\n        enabled: false\n      },\n      series: [{\n        data: [40, 95, 60, 45, 90, 50, 75]\n      }],\n      legend: {\n        show: false\n      },\n      xaxis: {\n        categories: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false\n        }\n      },\n      responsive: [{\n        breakpoint: 1440,\n        options: {\n          plotOptions: {\n            bar: {\n              borderRadius: 9,\n              columnWidth: '60%'\n            }\n          }\n        }\n      }, {\n        breakpoint: 1300,\n        options: {\n          plotOptions: {\n            bar: {\n              borderRadius: 9,\n              columnWidth: '60%'\n            }\n          }\n        }\n      }, {\n        breakpoint: 1200,\n        options: {\n          plotOptions: {\n            bar: {\n              borderRadius: 8,\n              columnWidth: '50%'\n            }\n          }\n        }\n      }, {\n        breakpoint: 1040,\n        options: {\n          plotOptions: {\n            bar: {\n              borderRadius: 8,\n              columnWidth: '50%'\n            }\n          }\n        }\n      }, {\n        breakpoint: 991,\n        options: {\n          plotOptions: {\n            bar: {\n              borderRadius: 8,\n              columnWidth: '50%'\n            }\n          }\n        }\n      }, {\n        breakpoint: 420,\n        options: {\n          plotOptions: {\n            bar: {\n              borderRadius: 8,\n              columnWidth: '50%'\n            }\n          }\n        }\n      }]\n    };\n  if (_typeof(visitorBarChartEl) !== undefined && visitorBarChartEl !== null) {\n    var visitorBarChart = new ApexCharts(visitorBarChartEl, visitorBarChartConfig);\n    visitorBarChart.render();\n  }\n\n  // Activity Area Chart\n  // --------------------------------------------------------------------\n  var activityAreaChartEl = document.querySelector('#activityChart'),\n    activityAreaChartConfig = {\n      chart: {\n        height: 120,\n        width: 220,\n        parentHeightOffset: 0,\n        toolbar: {\n          show: false\n        },\n        type: 'area'\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 2,\n        curve: 'smooth'\n      },\n      series: [{\n        data: [15, 20, 14, 22, 17, 40, 12, 35, 25]\n      }],\n      colors: [config.colors.success],\n      fill: {\n        type: 'gradient',\n        gradient: {\n          shade: shadeColor,\n          shadeIntensity: 0.8,\n          opacityFrom: 0.8,\n          opacityTo: 0.25,\n          stops: [0, 85, 100]\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          top: -20,\n          bottom: -8\n        }\n      },\n      legend: {\n        show: false\n      },\n      xaxis: {\n        categories: ['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            fontSize: '13px',\n            colors: labelColor\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false\n        }\n      }\n    };\n  if (_typeof(activityAreaChartEl) !== undefined && activityAreaChartEl !== null) {\n    var activityAreaChart = new ApexCharts(activityAreaChartEl, activityAreaChartConfig);\n    activityAreaChart.render();\n  }\n\n  // Order Statistics Chart\n  // --------------------------------------------------------------------\n  var leadsReportChartEl = document.querySelector('#leadsReportChart'),\n    leadsReportChartConfig = {\n      chart: {\n        height: 157,\n        width: 130,\n        parentHeightOffset: 0,\n        type: 'donut'\n      },\n      labels: ['Electronic', 'Sports', 'Decor', 'Fashion'],\n      series: [45, 58, 30, 50],\n      colors: [chartColors.donut.series1, chartColors.donut.series2, chartColors.donut.series3, chartColors.donut.series4],\n      stroke: {\n        width: 0\n      },\n      dataLabels: {\n        enabled: false,\n        formatter: function formatter(val, opt) {\n          return parseInt(val) + '%';\n        }\n      },\n      legend: {\n        show: false\n      },\n      tooltip: {\n        theme: false\n      },\n      grid: {\n        padding: {\n          top: 15\n        }\n      },\n      plotOptions: {\n        pie: {\n          donut: {\n            size: '75%',\n            labels: {\n              show: true,\n              value: {\n                fontSize: '1.5rem',\n                fontFamily: 'Public Sans',\n                color: headingColor,\n                fontWeight: 500,\n                offsetY: -15,\n                formatter: function formatter(val) {\n                  return parseInt(val) + '%';\n                }\n              },\n              name: {\n                offsetY: 20,\n                fontFamily: 'Public Sans'\n              },\n              total: {\n                show: true,\n                fontSize: '.7rem',\n                label: '1 Week',\n                color: labelColor,\n                formatter: function formatter(w) {\n                  return '32%';\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n  if (_typeof(leadsReportChartEl) !== undefined && leadsReportChartEl !== null) {\n    var leadsReportChart = new ApexCharts(leadsReportChartEl, leadsReportChartConfig);\n    leadsReportChart.render();\n  }\n})();\n\n//# sourceURL=webpack://Sneat/./static/js/cards-statistics.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/cards-statistics.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});