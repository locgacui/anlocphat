/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/forms-tagify.js":
/*!***********************************!*\
  !*** ./static/js/forms-tagify.js ***!
  \***********************************/
/***/ (function() {

eval("/**\n * Tagify\n */\n\n\n\n(function () {\n  // Basic\n  //------------------------------------------------------\n  var tagifyBasicEl = document.querySelector('#TagifyBasic');\n  var TagifyBasic = new Tagify(tagifyBasicEl);\n\n  // Read only\n  //------------------------------------------------------\n  var tagifyReadonlyEl = document.querySelector('#TagifyReadonly');\n  var TagifyReadonly = new Tagify(tagifyReadonlyEl);\n\n  // Custom list & inline suggestion\n  //------------------------------------------------------\n  var TagifyCustomInlineSuggestionEl = document.querySelector('#TagifyCustomInlineSuggestion');\n  var TagifyCustomListSuggestionEl = document.querySelector('#TagifyCustomListSuggestion');\n  var whitelist = ['A# .NET', 'A# (Axiom)', 'A-0 System', 'A+', 'A++', 'ABAP', 'ABC', 'ABC ALGOL', 'ABSET', 'ABSYS', 'ACC', 'Accent', 'Ace DASL', 'ACL2', 'Avicsoft', 'ACT-III', 'Action!', 'ActionScript', 'Ada', 'Adenine', 'Agda', 'Agilent VEE', 'Agora', 'AIMMS', 'Alef', 'ALF', 'ALGOL 58', 'ALGOL 60', 'ALGOL 68', 'ALGOL W', 'Alice', 'Alma-0', 'AmbientTalk', 'Amiga E', 'AMOS', 'AMPL', 'Apex (Salesforce.com)', 'APL', 'AppleScript', 'Arc', 'ARexx', 'Argus', 'AspectJ', 'Assembly language', 'ATS', 'Ateji PX', 'AutoHotkey', 'Autocoder', 'AutoIt', 'AutoLISP / Visual LISP', 'Averest', 'AWK', 'Axum', 'Active Server Pages', 'ASP.NET'];\n  // Inline\n  var TagifyCustomInlineSuggestion = new Tagify(TagifyCustomInlineSuggestionEl, {\n    whitelist: whitelist,\n    maxTags: 10,\n    dropdown: {\n      maxItems: 20,\n      classname: 'tags-inline',\n      enabled: 0,\n      closeOnSelect: false\n    }\n  });\n  // List\n  var TagifyCustomListSuggestion = new Tagify(TagifyCustomListSuggestionEl, {\n    whitelist: whitelist,\n    maxTags: 10,\n    dropdown: {\n      maxItems: 20,\n      classname: '',\n      enabled: 0,\n      closeOnSelect: false\n    }\n  });\n\n  // Users List suggestion\n  //------------------------------------------------------\n  var TagifyUserListEl = document.querySelector('#TagifyUserList');\n  var usersList = [{\n    value: 1,\n    name: 'Justinian Hattersley',\n    avatar: 'https://i.pravatar.cc/80?img=1',\n    email: 'jhattersley0@ucsd.edu'\n  }, {\n    value: 2,\n    name: 'Antons Esson',\n    avatar: 'https://i.pravatar.cc/80?img=2',\n    email: 'aesson1@ning.com'\n  }, {\n    value: 3,\n    name: 'Ardeen Batisse',\n    avatar: 'https://i.pravatar.cc/80?img=3',\n    email: 'abatisse2@nih.gov'\n  }, {\n    value: 4,\n    name: 'Graeme Yellowley',\n    avatar: 'https://i.pravatar.cc/80?img=4',\n    email: 'gyellowley3@behance.net'\n  }, {\n    value: 5,\n    name: 'Dido Wilford',\n    avatar: 'https://i.pravatar.cc/80?img=5',\n    email: 'dwilford4@jugem.jp'\n  }, {\n    value: 6,\n    name: 'Celesta Orwin',\n    avatar: 'https://i.pravatar.cc/80?img=6',\n    email: 'corwin5@meetup.com'\n  }, {\n    value: 7,\n    name: 'Sally Main',\n    avatar: 'https://i.pravatar.cc/80?img=7',\n    email: 'smain6@techcrunch.com'\n  }, {\n    value: 8,\n    name: 'Grethel Haysman',\n    avatar: 'https://i.pravatar.cc/80?img=8',\n    email: 'ghaysman7@mashable.com'\n  }, {\n    value: 9,\n    name: 'Marvin Mandrake',\n    avatar: 'https://i.pravatar.cc/80?img=9',\n    email: 'mmandrake8@sourceforge.net'\n  }, {\n    value: 10,\n    name: 'Corrie Tidey',\n    avatar: 'https://i.pravatar.cc/80?img=10',\n    email: 'ctidey9@youtube.com'\n  }];\n  function tagTemplate(tagData) {\n    return \"\\n    <tag title=\\\"\".concat(tagData.title || tagData.email, \"\\\"\\n      contenteditable='false'\\n      spellcheck='false'\\n      tabIndex=\\\"-1\\\"\\n      class=\\\"\").concat(this.settings.classNames.tag, \" \").concat(tagData.class ? tagData.class : '', \"\\\"\\n      \").concat(this.getAttributes(tagData), \"\\n    >\\n      <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>\\n      <div>\\n        <div class='tagify__tag__avatar-wrap'>\\n          <img onerror=\\\"this.style.visibility='hidden'\\\" src=\\\"\").concat(tagData.avatar, \"\\\">\\n        </div>\\n        <span class='tagify__tag-text'>\").concat(tagData.name, \"</span>\\n      </div>\\n    </tag>\\n  \");\n  }\n  function suggestionItemTemplate(tagData) {\n    return \"\\n    <div \".concat(this.getAttributes(tagData), \"\\n      class='tagify__dropdown__item align-items-center \").concat(tagData.class ? tagData.class : '', \"'\\n      tabindex=\\\"0\\\"\\n      role=\\\"option\\\"\\n    >\\n      \").concat(tagData.avatar ? \"<div class='tagify__dropdown__item__avatar-wrap'>\\n          <img onerror=\\\"this.style.visibility='hidden'\\\" src=\\\"\".concat(tagData.avatar, \"\\\">\\n        </div>\") : '', \"\\n      <div class=\\\"fw-medium\\\">\").concat(tagData.name, \"</div>\\n      <span>\").concat(tagData.email, \"</span>\\n    </div>\\n  \");\n  }\n  function dropdownHeaderTemplate(suggestions) {\n    return \"\\n        <div class=\\\"\".concat(this.settings.classNames.dropdownItem, \" \").concat(this.settings.classNames.dropdownItem, \"__addAll\\\">\\n            <strong>\").concat(this.value.length ? \"Add remaning\" : 'Add All', \"</strong>\\n            <span>\").concat(suggestions.length, \" members</span>\\n        </div>\\n    \");\n  }\n\n  // initialize Tagify on the above input node reference\n  var TagifyUserList = new Tagify(TagifyUserListEl, {\n    tagTextProp: 'name',\n    // very important since a custom template is used with this property as text. allows typing a \"value\" or a \"name\" to match input with whitelist\n    enforceWhitelist: true,\n    skipInvalid: true,\n    // do not remporarily add invalid tags\n    dropdown: {\n      closeOnSelect: false,\n      enabled: 0,\n      classname: 'users-list',\n      searchKeys: ['name', 'email'] // very important to set by which keys to search for suggesttions when typing\n    },\n    templates: {\n      tag: tagTemplate,\n      dropdownItem: suggestionItemTemplate,\n      dropdownHeader: dropdownHeaderTemplate\n    },\n    whitelist: usersList\n  });\n\n  // attach events listeners\n  TagifyUserList.on('dropdown:select', onSelectSuggestion) // allows selecting all the suggested (whitelist) items\n  .on('edit:start', onEditStart); // show custom text in the tag while in edit-mode\n\n  function onSelectSuggestion(e) {\n    // custom class from \"dropdownHeaderTemplate\"\n    if (e.detail.elm.classList.contains(\"\".concat(TagifyUserList.settings.classNames.dropdownItem, \"__addAll\"))) TagifyUserList.dropdown.selectAll();\n  }\n  function onEditStart(_ref) {\n    var _ref$detail = _ref.detail,\n      tag = _ref$detail.tag,\n      data = _ref$detail.data;\n    TagifyUserList.setTagTextNode(tag, \"\".concat(data.name, \" <\").concat(data.email, \">\"));\n  }\n\n  // Email List suggestion\n  //------------------------------------------------------\n  // generate random whitelist items (for the demo)\n  var randomStringsArr = Array.apply(null, Array(100)).map(function () {\n    return Array.apply(null, Array(~~(Math.random() * 10 + 3))).map(function () {\n      return String.fromCharCode(Math.random() * (123 - 97) + 97);\n    }).join('') + '@gmail.com';\n  });\n  var TagifyEmailListEl = document.querySelector('#TagifyEmailList'),\n    TagifyEmailList = new Tagify(TagifyEmailListEl, {\n      // email address validation (https://stackoverflow.com/a/46181/104380)\n      pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      whitelist: randomStringsArr,\n      callbacks: {\n        invalid: onInvalidTag\n      },\n      dropdown: {\n        position: 'text',\n        enabled: 1 // show suggestions dropdown after 1 typed character\n      }\n    }),\n    button = TagifyEmailListEl.nextElementSibling; // \"add new tag\" action-button\n\n  button.addEventListener('click', onAddButtonClick);\n  function onAddButtonClick() {\n    TagifyEmailList.addEmptyTag();\n  }\n  function onInvalidTag(e) {\n    console.log('invalid', e.detail);\n  }\n})();\n\n//# sourceURL=webpack://Sneat/./static/js/forms-tagify.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/forms-tagify.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});