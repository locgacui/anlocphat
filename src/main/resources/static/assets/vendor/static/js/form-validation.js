/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/form-validation.js":
/*!**************************************!*\
  !*** ./static/js/form-validation.js ***!
  \**************************************/
/***/ (function() {

eval("\n\n(function () {\n  // Init custom option check\n  window.Helpers.initCustomOptionCheck();\n\n  // Bootstrap validation example\n  //------------------------------------------------------------------------------------------\n  // const flatPickrEL = $('.flatpickr-validation');\n  var flatPickrList = [].slice.call(document.querySelectorAll('.flatpickr-validation'));\n  // Flat pickr\n  if (flatPickrList) {\n    flatPickrList.forEach(function (flatPickr) {\n      flatPickr.flatpickr({\n        monthSelectorType: 'static'\n      });\n    });\n  }\n\n  // Fetch all the forms we want to apply custom Bootstrap validation styles to\n  var bsValidationForms = document.querySelectorAll('.needs-validation');\n\n  // Loop over them and prevent submission\n  Array.prototype.slice.call(bsValidationForms).forEach(function (form) {\n    form.addEventListener('submit', function (event) {\n      if (!form.checkValidity()) {\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        // Submit your form\n        alert('Submitted!!!');\n      }\n      form.classList.add('was-validated');\n    }, false);\n  });\n})();\n/**\n * Form Validation (https://formvalidation.io/guide/examples)\n * ? Primary form validation plugin for this template\n * ? In this example we've try to covered as many form inputs as we can.\n * ? Though If we've miss any 3rd party libraries, then refer: https://formvalidation.io/guide/examples/integrating-with-3rd-party-libraries\n */\n//------------------------------------------------------------------------------------------\ndocument.addEventListener('DOMContentLoaded', function (e) {\n  (function () {\n    var formValidationExamples = document.getElementById('formValidationExamples'),\n      formValidationSelect2Ele = jQuery(formValidationExamples.querySelector('[name=\"formValidationSelect2\"]')),\n      formValidationTechEle = jQuery(formValidationExamples.querySelector('[name=\"formValidationTech\"]')),\n      formValidationLangEle = formValidationExamples.querySelector('[name=\"formValidationLang\"]'),\n      formValidationHobbiesEle = jQuery(formValidationExamples.querySelector('.selectpicker')),\n      tech = ['ReactJS', 'Angular', 'VueJS', 'Html', 'Css', 'Sass', 'Pug', 'Gulp', 'Php', 'Laravel', 'Python', 'Bootstrap', 'Material Design', 'NodeJS'];\n    var fv = FormValidation.formValidation(formValidationExamples, {\n      fields: {\n        formValidationName: {\n          validators: {\n            notEmpty: {\n              message: 'Please enter your name'\n            },\n            stringLength: {\n              min: 6,\n              max: 30,\n              message: 'The name must be more than 6 and less than 30 characters long'\n            },\n            regexp: {\n              regexp: /^[a-zA-Z0-9 ]+$/,\n              message: 'The name can only consist of alphabetical, number and space'\n            }\n          }\n        },\n        formValidationEmail: {\n          validators: {\n            notEmpty: {\n              message: 'Please enter your email'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        },\n        formValidationPass: {\n          validators: {\n            notEmpty: {\n              message: 'Please enter your password'\n            }\n          }\n        },\n        formValidationConfirmPass: {\n          validators: {\n            notEmpty: {\n              message: 'Please confirm password'\n            },\n            identical: {\n              compare: function compare() {\n                return formValidationExamples.querySelector('[name=\"formValidationPass\"]').value;\n              },\n              message: 'The password and its confirm are not the same'\n            }\n          }\n        },\n        formValidationFile: {\n          validators: {\n            notEmpty: {\n              message: 'Please select the file'\n            }\n          }\n        },\n        formValidationDob: {\n          validators: {\n            notEmpty: {\n              message: 'Please select your DOB'\n            },\n            date: {\n              format: 'YYYY/MM/DD',\n              message: 'The value is not a valid date'\n            }\n          }\n        },\n        formValidationSelect2: {\n          validators: {\n            notEmpty: {\n              message: 'Please select your country'\n            }\n          }\n        },\n        formValidationLang: {\n          validators: {\n            notEmpty: {\n              message: 'Please add your language'\n            }\n          }\n        },\n        formValidationTech: {\n          validators: {\n            notEmpty: {\n              message: 'Please select technology'\n            }\n          }\n        },\n        formValidationHobbies: {\n          validators: {\n            notEmpty: {\n              message: 'Please select your hobbies'\n            }\n          }\n        },\n        formValidationBio: {\n          validators: {\n            notEmpty: {\n              message: 'Please enter your bio'\n            },\n            stringLength: {\n              min: 100,\n              max: 500,\n              message: 'The bio must be more than 100 and less than 500 characters long'\n            }\n          }\n        },\n        formValidationGender: {\n          validators: {\n            notEmpty: {\n              message: 'Please select your gender'\n            }\n          }\n        },\n        formValidationPlan: {\n          validators: {\n            notEmpty: {\n              message: 'Please select your preferred plan'\n            }\n          }\n        },\n        formValidationSwitch: {\n          validators: {\n            notEmpty: {\n              message: 'Please select your preference'\n            }\n          }\n        },\n        formValidationCheckbox: {\n          validators: {\n            notEmpty: {\n              message: 'Please confirm our T&C'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap5: new FormValidation.plugins.Bootstrap5({\n          // Use this for enabling/changing valid/invalid class\n          // eleInvalidClass: '',\n          eleValidClass: '',\n          rowSelector: function rowSelector(field, ele) {\n            // field is the field name & ele is the field element\n            switch (field) {\n              case 'formValidationName':\n              case 'formValidationEmail':\n              case 'formValidationPass':\n              case 'formValidationConfirmPass':\n              case 'formValidationFile':\n              case 'formValidationDob':\n              case 'formValidationSelect2':\n              case 'formValidationLang':\n              case 'formValidationTech':\n              case 'formValidationHobbies':\n              case 'formValidationBio':\n              case 'formValidationGender':\n                return '.col-md-6';\n              case 'formValidationPlan':\n                return '.col-xl-3';\n              case 'formValidationSwitch':\n              case 'formValidationCheckbox':\n                return '.col-12';\n              default:\n                return '.row';\n            }\n          }\n        }),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        // Submit the form when all fields are valid\n        defaultSubmit: new FormValidation.plugins.DefaultSubmit(),\n        autoFocus: new FormValidation.plugins.AutoFocus()\n      },\n      init: function init(instance) {\n        instance.on('plugins.message.placed', function (e) {\n          //* Move the error message out of the `input-group` element\n          if (e.element.parentElement.classList.contains('input-group')) {\n            // `e.field`: The field name\n            // `e.messageElement`: The message element\n            // `e.element`: The field element\n            e.element.parentElement.insertAdjacentElement('afterend', e.messageElement);\n          }\n          //* Move the error message out of the `row` element for custom-options\n          if (e.element.parentElement.parentElement.classList.contains('custom-option')) {\n            e.element.closest('.row').insertAdjacentElement('afterend', e.messageElement);\n          }\n        });\n      }\n    });\n\n    //? Revalidation third-party libs inputs on change trigger\n\n    // Flatpickr\n    var flatpickrDate = document.querySelector('[name=\"formValidationDob\"]');\n    if (flatpickrDate) {\n      flatpickrDate.flatpickr({\n        enableTime: false,\n        // See https://flatpickr.js.org/formatting/\n        dateFormat: 'Y/m/d',\n        // After selecting a date, we need to revalidate the field\n        onChange: function onChange() {\n          fv.revalidateField('formValidationDob');\n        }\n      });\n    }\n\n    // Select2 (Country)\n    if (formValidationSelect2Ele.length) {\n      formValidationSelect2Ele.wrap('<div class=\"position-relative\"></div>');\n      formValidationSelect2Ele.select2({\n        placeholder: 'Select country',\n        dropdownParent: formValidationSelect2Ele.parent()\n      }).on('change', function () {\n        // Revalidate the color field when an option is chosen\n        fv.revalidateField('formValidationSelect2');\n      });\n    }\n\n    // Typeahead\n\n    // String Matcher function for typeahead\n    var substringMatcher = function substringMatcher(strs) {\n      return function findMatches(q, cb) {\n        var matches, substrRegex;\n        matches = [];\n        substrRegex = new RegExp(q, 'i');\n        $.each(strs, function (i, str) {\n          if (substrRegex.test(str)) {\n            matches.push(str);\n          }\n        });\n        cb(matches);\n      };\n    };\n\n    // Check if rtl\n    if (isRtl) {\n      var typeaheadList = [].slice.call(document.querySelectorAll('.typeahead'));\n\n      // Flat pickr\n      if (typeaheadList) {\n        typeaheadList.forEach(function (typeahead) {\n          typeahead.setAttribute('dir', 'rtl');\n        });\n      }\n    }\n    formValidationTechEle.typeahead({\n      hint: !isRtl,\n      highlight: true,\n      minLength: 1\n    }, {\n      name: 'tech',\n      source: substringMatcher(tech)\n    });\n\n    // Tagify\n    var formValidationLangTagify = new Tagify(formValidationLangEle);\n    formValidationLangEle.addEventListener('change', onChange);\n    function onChange() {\n      fv.revalidateField('formValidationLang');\n    }\n\n    //Bootstrap select\n    formValidationHobbiesEle.on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {\n      fv.revalidateField('formValidationHobbies');\n    });\n  })();\n});\n\n//# sourceURL=webpack://Sneat/./static/js/form-validation.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/form-validation.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});