/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/app-chat.js":
/*!*******************************!*\
  !*** ./static/js/app-chat.js ***!
  \*******************************/
/***/ (function() {

eval("/**\n * App Chat\n */\n\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  (function () {\n    var chatContactsBody = document.querySelector('.app-chat-contacts .sidebar-body'),\n      chatContactListItems = [].slice.call(document.querySelectorAll('.chat-contact-list-item:not(.chat-contact-list-item-title)')),\n      chatHistoryBody = document.querySelector('.chat-history-body'),\n      chatSidebarLeftBody = document.querySelector('.app-chat-sidebar-left .sidebar-body'),\n      chatSidebarRightBody = document.querySelector('.app-chat-sidebar-right .sidebar-body'),\n      chatUserStatus = [].slice.call(document.querySelectorAll(\".form-check-input[name='chat-user-status']\")),\n      chatSidebarLeftUserAbout = $('.chat-sidebar-left-user-about'),\n      formSendMessage = document.querySelector('.form-send-message'),\n      messageInput = document.querySelector('.message-input'),\n      searchInput = document.querySelector('.chat-search-input'),\n      speechToText = $('.speech-to-text'),\n      // ! jQuery dependency for speech to text\n      userStatusObj = {\n        active: 'avatar-online',\n        offline: 'avatar-offline',\n        away: 'avatar-away',\n        busy: 'avatar-busy'\n      };\n\n    // Initialize PerfectScrollbar\n    // ------------------------------\n\n    // Chat contacts scrollbar\n    if (chatContactsBody) {\n      new PerfectScrollbar(chatContactsBody, {\n        wheelPropagation: false,\n        suppressScrollX: true\n      });\n    }\n\n    // Chat history scrollbar\n    if (chatHistoryBody) {\n      new PerfectScrollbar(chatHistoryBody, {\n        wheelPropagation: false,\n        suppressScrollX: true\n      });\n    }\n\n    // Sidebar left scrollbar\n    if (chatSidebarLeftBody) {\n      new PerfectScrollbar(chatSidebarLeftBody, {\n        wheelPropagation: false,\n        suppressScrollX: true\n      });\n    }\n\n    // Sidebar right scrollbar\n    if (chatSidebarRightBody) {\n      new PerfectScrollbar(chatSidebarRightBody, {\n        wheelPropagation: false,\n        suppressScrollX: true\n      });\n    }\n\n    // Scroll to bottom function\n    function scrollToBottom() {\n      chatHistoryBody.scrollTo(0, chatHistoryBody.scrollHeight);\n    }\n    scrollToBottom();\n\n    // User About Maxlength Init\n    if (chatSidebarLeftUserAbout.length) {\n      chatSidebarLeftUserAbout.maxlength({\n        alwaysShow: true,\n        warningClass: 'label label-success bg-success text-white',\n        limitReachedClass: 'label label-danger',\n        separator: '/',\n        validate: true,\n        threshold: 120\n      });\n    }\n\n    // Update user status\n    chatUserStatus.forEach(function (el) {\n      el.addEventListener('click', function (e) {\n        var chatLeftSidebarUserAvatar = document.querySelector('.chat-sidebar-left-user .avatar'),\n          value = e.currentTarget.value;\n        //Update status in left sidebar user avatar\n        chatLeftSidebarUserAvatar.removeAttribute('class');\n        Helpers._addClass('avatar avatar-xl ' + userStatusObj[value] + '', chatLeftSidebarUserAvatar);\n        //Update status in contacts sidebar user avatar\n        var chatContactsUserAvatar = document.querySelector('.app-chat-contacts .avatar');\n        chatContactsUserAvatar.removeAttribute('class');\n        Helpers._addClass('flex-shrink-0 avatar ' + userStatusObj[value] + ' me-3', chatContactsUserAvatar);\n      });\n    });\n\n    // Select chat or contact\n    chatContactListItems.forEach(function (chatContactListItem) {\n      // Bind click event to each chat contact list item\n      chatContactListItem.addEventListener('click', function (e) {\n        // Remove active class from chat contact list item\n        chatContactListItems.forEach(function (chatContactListItem) {\n          chatContactListItem.classList.remove('active');\n        });\n        // Add active class to current chat contact list item\n        e.currentTarget.classList.add('active');\n      });\n    });\n\n    // Filter Chats\n    if (searchInput) {\n      searchInput.addEventListener('keyup', function (e) {\n        var searchValue = e.currentTarget.value.toLowerCase(),\n          searchChatListItemsCount = 0,\n          searchContactListItemsCount = 0,\n          chatListItem0 = document.querySelector('.chat-list-item-0'),\n          contactListItem0 = document.querySelector('.contact-list-item-0'),\n          searchChatListItems = [].slice.call(document.querySelectorAll('#chat-list li:not(.chat-contact-list-item-title)')),\n          searchContactListItems = [].slice.call(document.querySelectorAll('#contact-list li:not(.chat-contact-list-item-title)'));\n\n        // Search in chats\n        searchChatContacts(searchChatListItems, searchChatListItemsCount, searchValue, chatListItem0);\n        // Search in contacts\n        searchChatContacts(searchContactListItems, searchContactListItemsCount, searchValue, contactListItem0);\n      });\n    }\n\n    // Search chat and contacts function\n    function searchChatContacts(searchListItems, searchListItemsCount, searchValue, listItem0) {\n      searchListItems.forEach(function (searchListItem) {\n        var searchListItemText = searchListItem.textContent.toLowerCase();\n        if (searchValue) {\n          if (-1 < searchListItemText.indexOf(searchValue)) {\n            searchListItem.classList.add('d-flex');\n            searchListItem.classList.remove('d-none');\n            searchListItemsCount++;\n          } else {\n            searchListItem.classList.add('d-none');\n          }\n        } else {\n          searchListItem.classList.add('d-flex');\n          searchListItem.classList.remove('d-none');\n          searchListItemsCount++;\n        }\n      });\n      // Display no search fount if searchListItemsCount == 0\n      if (searchListItemsCount == 0) {\n        listItem0.classList.remove('d-none');\n      } else {\n        listItem0.classList.add('d-none');\n      }\n    }\n\n    // Send Message\n    formSendMessage.addEventListener('submit', function (e) {\n      e.preventDefault();\n      if (messageInput.value) {\n        // Create a div and add a class\n        var renderMsg = document.createElement('div');\n        renderMsg.className = 'chat-message-text mt-2';\n        renderMsg.innerHTML = '<p class=\"mb-0 text-break\">' + messageInput.value + '</p>';\n        document.querySelector('li:last-child .chat-message-wrapper').appendChild(renderMsg);\n        messageInput.value = '';\n        scrollToBottom();\n      }\n    });\n\n    // on click of chatHistoryHeaderMenu, Remove data-overlay attribute from chatSidebarLeftClose to resolve overlay overlapping issue for two sidebar\n    var chatHistoryHeaderMenu = document.querySelector(\".chat-history-header [data-target='#app-chat-contacts']\"),\n      chatSidebarLeftClose = document.querySelector('.app-chat-sidebar-left .close-sidebar');\n    chatHistoryHeaderMenu.addEventListener('click', function (e) {\n      chatSidebarLeftClose.removeAttribute('data-overlay');\n    });\n    // }\n\n    // Speech To Text\n    if (speechToText.length) {\n      var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n      if (SpeechRecognition !== undefined && SpeechRecognition !== null) {\n        var recognition = new SpeechRecognition(),\n          listening = false;\n        speechToText.on('click', function () {\n          var $this = $(this);\n          recognition.onspeechstart = function () {\n            listening = true;\n          };\n          if (listening === false) {\n            recognition.start();\n          }\n          recognition.onerror = function (event) {\n            listening = false;\n          };\n          recognition.onresult = function (event) {\n            $this.closest('.form-send-message').find('.message-input').val(event.results[0][0].transcript);\n          };\n          recognition.onspeechend = function (event) {\n            listening = false;\n            recognition.stop();\n          };\n        });\n      }\n    }\n  })();\n});\n\n//# sourceURL=webpack://Sneat/./static/js/app-chat.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/app-chat.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});