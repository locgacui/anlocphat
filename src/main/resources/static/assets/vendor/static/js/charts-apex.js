/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/charts-apex.js":
/*!**********************************!*\
  !*** ./static/js/charts-apex.js ***!
  \**********************************/
/***/ (function() {

eval("/**\n * Charts Apex\n */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n(function () {\n  var cardColor, headingColor, labelColor, borderColor, legendColor;\n  if (isDarkStyle) {\n    cardColor = config.colors_dark.cardColor;\n    headingColor = config.colors_dark.headingColor;\n    labelColor = config.colors_dark.textMuted;\n    legendColor = config.colors_dark.bodyColor;\n    borderColor = config.colors_dark.borderColor;\n  } else {\n    cardColor = config.colors.cardColor;\n    headingColor = config.colors.headingColor;\n    labelColor = config.colors.textMuted;\n    legendColor = config.colors.bodyColor;\n    borderColor = config.colors.borderColor;\n  }\n\n  // Color constant\n  var chartColors = {\n    column: {\n      series1: '#826af9',\n      series2: '#d2b0ff',\n      bg: '#f8d3ff'\n    },\n    donut: {\n      series1: '#fee802',\n      series2: '#3fd0bd',\n      series3: '#826bf8',\n      series4: '#2b9bf4'\n    },\n    area: {\n      series1: '#29dac7',\n      series2: '#60f2ca',\n      series3: '#a5f8cd'\n    }\n  };\n\n  // Heat chart data generator\n  function generateDataHeat(count, yrange) {\n    var i = 0;\n    var series = [];\n    while (i < count) {\n      var x = 'w' + (i + 1).toString();\n      var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n      series.push({\n        x: x,\n        y: y\n      });\n      i++;\n    }\n    return series;\n  }\n\n  // Line Area Chart\n  // --------------------------------------------------------------------\n  var areaChartEl = document.querySelector('#lineAreaChart'),\n    areaChartConfig = {\n      chart: {\n        height: 400,\n        type: 'area',\n        parentHeightOffset: 0,\n        toolbar: {\n          show: false\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: false,\n        curve: 'straight'\n      },\n      legend: {\n        show: true,\n        position: 'top',\n        horizontalAlign: 'start',\n        labels: {\n          colors: legendColor,\n          useSeriesColors: false\n        }\n      },\n      grid: {\n        borderColor: borderColor,\n        xaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      colors: [chartColors.area.series3, chartColors.area.series2, chartColors.area.series1],\n      series: [{\n        name: 'Visits',\n        data: [100, 120, 90, 170, 130, 160, 140, 240, 220, 180, 270, 280, 375]\n      }, {\n        name: 'Clicks',\n        data: [60, 80, 70, 110, 80, 100, 90, 180, 160, 140, 200, 220, 275]\n      }, {\n        name: 'Sales',\n        data: [20, 40, 30, 70, 40, 60, 50, 140, 120, 100, 140, 180, 220]\n      }],\n      xaxis: {\n        categories: ['7/12', '8/12', '9/12', '10/12', '11/12', '12/12', '13/12', '14/12', '15/12', '16/12', '17/12', '18/12', '19/12', '20/12'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1,\n        type: 'solid'\n      },\n      tooltip: {\n        shared: false\n      }\n    };\n  if (_typeof(areaChartEl) !== undefined && areaChartEl !== null) {\n    var areaChart = new ApexCharts(areaChartEl, areaChartConfig);\n    areaChart.render();\n  }\n\n  // Bar Chart\n  // --------------------------------------------------------------------\n  var barChartEl = document.querySelector('#barChart'),\n    barChartConfig = {\n      chart: {\n        height: 400,\n        type: 'bar',\n        stacked: true,\n        parentHeightOffset: 0,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          columnWidth: '15%',\n          colors: {\n            backgroundBarColors: [chartColors.column.bg, chartColors.column.bg, chartColors.column.bg, chartColors.column.bg, chartColors.column.bg],\n            backgroundBarRadius: 10\n          }\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      legend: {\n        show: true,\n        position: 'top',\n        horizontalAlign: 'start',\n        labels: {\n          colors: legendColor,\n          useSeriesColors: false\n        }\n      },\n      colors: [chartColors.column.series1, chartColors.column.series2],\n      stroke: {\n        show: true,\n        colors: ['transparent']\n      },\n      grid: {\n        borderColor: borderColor,\n        xaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      series: [{\n        name: 'Apple',\n        data: [90, 120, 55, 100, 80, 125, 175, 70, 88, 180]\n      }, {\n        name: 'Samsung',\n        data: [85, 100, 30, 40, 95, 90, 30, 110, 62, 20]\n      }],\n      xaxis: {\n        categories: ['7/12', '8/12', '9/12', '10/12', '11/12', '12/12', '13/12', '14/12', '15/12', '16/12'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      }\n    };\n  if (_typeof(barChartEl) !== undefined && barChartEl !== null) {\n    var barChart = new ApexCharts(barChartEl, barChartConfig);\n    barChart.render();\n  }\n\n  // Scatter Chart\n  // --------------------------------------------------------------------\n  var scatterChartEl = document.querySelector('#scatterChart'),\n    scatterChartConfig = {\n      chart: {\n        height: 400,\n        type: 'scatter',\n        zoom: {\n          enabled: true,\n          type: 'xy'\n        },\n        parentHeightOffset: 0,\n        toolbar: {\n          show: false\n        }\n      },\n      grid: {\n        borderColor: borderColor,\n        xaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      legend: {\n        show: true,\n        position: 'top',\n        horizontalAlign: 'start',\n        labels: {\n          colors: legendColor,\n          useSeriesColors: false\n        }\n      },\n      colors: [config.colors.warning, config.colors.primary, config.colors.success],\n      series: [{\n        name: 'Angular',\n        data: [[5.4, 170], [5.4, 100], [5.7, 110], [5.9, 150], [6.0, 200], [6.3, 170], [5.7, 140], [5.9, 130], [7.0, 150], [8.0, 120], [9.0, 170], [10.0, 190], [11.0, 220], [12.0, 170], [13.0, 230]]\n      }, {\n        name: 'Vue',\n        data: [[14.0, 220], [15.0, 280], [16.0, 230], [18.0, 320], [17.5, 280], [19.0, 250], [20.0, 350], [20.5, 320], [20.0, 320], [19.0, 280], [17.0, 280], [22.0, 300], [18.0, 120]]\n      }, {\n        name: 'React',\n        data: [[14.0, 290], [13.0, 190], [20.0, 220], [21.0, 350], [21.5, 290], [22.0, 220], [23.0, 140], [19.0, 400], [20.0, 200], [22.0, 90], [20.0, 120]]\n      }],\n      xaxis: {\n        tickAmount: 10,\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          formatter: function formatter(val) {\n            return parseFloat(val).toFixed(1);\n          },\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      }\n    };\n  if (_typeof(scatterChartEl) !== undefined && scatterChartEl !== null) {\n    var scatterChart = new ApexCharts(scatterChartEl, scatterChartConfig);\n    scatterChart.render();\n  }\n\n  // Line Chart\n  // --------------------------------------------------------------------\n  var lineChartEl = document.querySelector('#lineChart'),\n    lineChartConfig = {\n      chart: {\n        height: 400,\n        type: 'line',\n        parentHeightOffset: 0,\n        zoom: {\n          enabled: false\n        },\n        toolbar: {\n          show: false\n        }\n      },\n      series: [{\n        data: [280, 200, 220, 180, 270, 250, 70, 90, 200, 150, 160, 100, 150, 100, 50]\n      }],\n      markers: {\n        strokeWidth: 7,\n        strokeOpacity: 1,\n        strokeColors: [cardColor],\n        colors: [config.colors.warning]\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'straight'\n      },\n      colors: [config.colors.warning],\n      grid: {\n        borderColor: borderColor,\n        xaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          top: -20\n        }\n      },\n      tooltip: {\n        custom: function custom(_ref) {\n          var series = _ref.series,\n            seriesIndex = _ref.seriesIndex,\n            dataPointIndex = _ref.dataPointIndex,\n            w = _ref.w;\n          return '<div class=\"px-3 py-2\">' + '<span>' + series[seriesIndex][dataPointIndex] + '%</span>' + '</div>';\n        }\n      },\n      xaxis: {\n        categories: ['7/12', '8/12', '9/12', '10/12', '11/12', '12/12', '13/12', '14/12', '15/12', '16/12', '17/12', '18/12', '19/12', '20/12', '21/12'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      }\n    };\n  if (_typeof(lineChartEl) !== undefined && lineChartEl !== null) {\n    var lineChart = new ApexCharts(lineChartEl, lineChartConfig);\n    lineChart.render();\n  }\n\n  // Horizontal Bar Chart\n  // --------------------------------------------------------------------\n  var horizontalBarChartEl = document.querySelector('#horizontalBarChart'),\n    horizontalBarChartConfig = {\n      chart: {\n        height: 400,\n        type: 'bar',\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: true,\n          barHeight: '30%',\n          startingShape: 'rounded',\n          borderRadius: 8\n        }\n      },\n      grid: {\n        borderColor: borderColor,\n        xaxis: {\n          lines: {\n            show: false\n          }\n        },\n        padding: {\n          top: -20,\n          bottom: -12\n        }\n      },\n      colors: config.colors.info,\n      dataLabels: {\n        enabled: false\n      },\n      series: [{\n        data: [700, 350, 480, 600, 210, 550, 150]\n      }],\n      xaxis: {\n        categories: ['MON, 11', 'THU, 14', 'FRI, 15', 'MON, 18', 'WED, 20', 'FRI, 21', 'MON, 23'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      }\n    };\n  if (_typeof(horizontalBarChartEl) !== undefined && horizontalBarChartEl !== null) {\n    var horizontalBarChart = new ApexCharts(horizontalBarChartEl, horizontalBarChartConfig);\n    horizontalBarChart.render();\n  }\n\n  // Candlestick Chart\n  // --------------------------------------------------------------------\n  var candlestickEl = document.querySelector('#candleStickChart'),\n    candlestickChartConfig = {\n      chart: {\n        height: 410,\n        type: 'candlestick',\n        parentHeightOffset: 0,\n        toolbar: {\n          show: false\n        }\n      },\n      series: [{\n        data: [{\n          x: new Date(1538778600000),\n          y: [150, 170, 50, 100]\n        }, {\n          x: new Date(1538780400000),\n          y: [200, 400, 170, 330]\n        }, {\n          x: new Date(1538782200000),\n          y: [330, 340, 250, 280]\n        }, {\n          x: new Date(1538784000000),\n          y: [300, 330, 200, 320]\n        }, {\n          x: new Date(1538785800000),\n          y: [320, 450, 280, 350]\n        }, {\n          x: new Date(1538787600000),\n          y: [300, 350, 80, 250]\n        }, {\n          x: new Date(1538789400000),\n          y: [200, 330, 170, 300]\n        }, {\n          x: new Date(1538791200000),\n          y: [200, 220, 70, 130]\n        }, {\n          x: new Date(1538793000000),\n          y: [220, 270, 180, 250]\n        }, {\n          x: new Date(1538794800000),\n          y: [200, 250, 80, 100]\n        }, {\n          x: new Date(1538796600000),\n          y: [150, 170, 50, 120]\n        }, {\n          x: new Date(1538798400000),\n          y: [110, 450, 10, 420]\n        }, {\n          x: new Date(1538800200000),\n          y: [400, 480, 300, 320]\n        }, {\n          x: new Date(1538802000000),\n          y: [380, 480, 350, 450]\n        }]\n      }],\n      xaxis: {\n        type: 'datetime',\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      yaxis: {\n        tooltip: {\n          enabled: true\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      },\n      grid: {\n        borderColor: borderColor,\n        xaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          top: -20\n        }\n      },\n      plotOptions: {\n        candlestick: {\n          colors: {\n            upward: config.colors.success,\n            downward: config.colors.danger\n          }\n        },\n        bar: {\n          columnWidth: '40%'\n        }\n      }\n    };\n  if (_typeof(candlestickEl) !== undefined && candlestickEl !== null) {\n    var candlestickChart = new ApexCharts(candlestickEl, candlestickChartConfig);\n    candlestickChart.render();\n  }\n\n  // Heat map chart\n  // --------------------------------------------------------------------\n  var heatMapEl = document.querySelector('#heatMapChart'),\n    heatMapChartConfig = {\n      chart: {\n        height: 350,\n        type: 'heatmap',\n        parentHeightOffset: 0,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        heatmap: {\n          enableShades: false,\n          colorScale: {\n            ranges: [{\n              from: 0,\n              to: 10,\n              name: '0-10',\n              color: '#90B3F3'\n            }, {\n              from: 11,\n              to: 20,\n              name: '10-20',\n              color: '#7EA6F1'\n            }, {\n              from: 21,\n              to: 30,\n              name: '20-30',\n              color: '#6B9AEF'\n            }, {\n              from: 31,\n              to: 40,\n              name: '30-40',\n              color: '#598DEE'\n            }, {\n              from: 41,\n              to: 50,\n              name: '40-50',\n              color: '#4680EC'\n            }, {\n              from: 51,\n              to: 60,\n              name: '50-60',\n              color: '#3474EA'\n            }]\n          }\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      grid: {\n        show: false\n      },\n      legend: {\n        show: true,\n        position: 'top',\n        horizontalAlign: 'start',\n        labels: {\n          colors: legendColor,\n          useSeriesColors: false\n        },\n        markers: {\n          offsetY: 0,\n          offsetX: -3\n        },\n        itemMargin: {\n          vertical: 3,\n          horizontal: 10\n        }\n      },\n      stroke: {\n        curve: 'smooth',\n        width: 4,\n        lineCap: 'round',\n        colors: [cardColor]\n      },\n      series: [{\n        name: 'SUN',\n        data: generateDataHeat(24, {\n          min: 0,\n          max: 60\n        })\n      }, {\n        name: 'MON',\n        data: generateDataHeat(24, {\n          min: 0,\n          max: 60\n        })\n      }, {\n        name: 'TUE',\n        data: generateDataHeat(24, {\n          min: 0,\n          max: 60\n        })\n      }, {\n        name: 'WED',\n        data: generateDataHeat(24, {\n          min: 0,\n          max: 60\n        })\n      }, {\n        name: 'THU',\n        data: generateDataHeat(24, {\n          min: 0,\n          max: 60\n        })\n      }, {\n        name: 'FRI',\n        data: generateDataHeat(24, {\n          min: 0,\n          max: 60\n        })\n      }, {\n        name: 'SAT',\n        data: generateDataHeat(24, {\n          min: 0,\n          max: 60\n        })\n      }],\n      xaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        },\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '13px'\n          }\n        }\n      }\n    };\n  if (_typeof(heatMapEl) !== undefined && heatMapEl !== null) {\n    var heatMapChart = new ApexCharts(heatMapEl, heatMapChartConfig);\n    heatMapChart.render();\n  }\n\n  // Radial Bar Chart\n  // --------------------------------------------------------------------\n  var radialBarChartEl = document.querySelector('#radialBarChart'),\n    radialBarChartConfig = {\n      chart: {\n        height: 380,\n        type: 'radialBar'\n      },\n      colors: [chartColors.donut.series1, chartColors.donut.series2, chartColors.donut.series4],\n      plotOptions: {\n        radialBar: {\n          size: 185,\n          hollow: {\n            size: '40%'\n          },\n          track: {\n            margin: 10,\n            background: config.colors_label.secondary\n          },\n          dataLabels: {\n            name: {\n              fontSize: '2rem',\n              fontFamily: 'Public Sans'\n            },\n            value: {\n              fontSize: '1.2rem',\n              color: legendColor,\n              fontFamily: 'Public Sans'\n            },\n            total: {\n              show: true,\n              fontWeight: 400,\n              fontSize: '1.3rem',\n              color: headingColor,\n              label: 'Comments',\n              formatter: function formatter(w) {\n                return '80%';\n              }\n            }\n          }\n        }\n      },\n      grid: {\n        borderColor: borderColor,\n        padding: {\n          top: -25,\n          bottom: -20\n        }\n      },\n      legend: {\n        show: true,\n        position: 'bottom',\n        labels: {\n          colors: legendColor,\n          useSeriesColors: false\n        }\n      },\n      stroke: {\n        lineCap: 'round'\n      },\n      series: [80, 50, 35],\n      labels: ['Comments', 'Replies', 'Shares']\n    };\n  if (_typeof(radialBarChartEl) !== undefined && radialBarChartEl !== null) {\n    var radialChart = new ApexCharts(radialBarChartEl, radialBarChartConfig);\n    radialChart.render();\n  }\n\n  // Radar Chart\n  // --------------------------------------------------------------------\n  var radarChartEl = document.querySelector('#radarChart'),\n    radarChartConfig = {\n      chart: {\n        height: 350,\n        type: 'radar',\n        toolbar: {\n          show: false\n        },\n        dropShadow: {\n          enabled: false,\n          blur: 8,\n          left: 1,\n          top: 1,\n          opacity: 0.2\n        }\n      },\n      legend: {\n        show: true,\n        position: 'bottom',\n        labels: {\n          colors: legendColor,\n          useSeriesColors: false\n        }\n      },\n      plotOptions: {\n        radar: {\n          polygons: {\n            strokeColors: borderColor,\n            connectorColors: borderColor\n          }\n        }\n      },\n      yaxis: {\n        show: false\n      },\n      series: [{\n        name: 'iPhone 12',\n        data: [41, 64, 81, 60, 42, 42, 33, 23]\n      }, {\n        name: 'Samsung s20',\n        data: [65, 46, 42, 25, 58, 63, 76, 43]\n      }],\n      colors: [chartColors.donut.series1, chartColors.donut.series3],\n      xaxis: {\n        categories: ['Battery', 'Brand', 'Camera', 'Memory', 'Storage', 'Display', 'OS', 'Price'],\n        labels: {\n          show: true,\n          style: {\n            colors: [labelColor, labelColor, labelColor, labelColor, labelColor, labelColor, labelColor, labelColor],\n            fontSize: '13px',\n            fontFamily: 'Public Sans'\n          }\n        }\n      },\n      fill: {\n        opacity: [1, 0.8]\n      },\n      stroke: {\n        show: false,\n        width: 0\n      },\n      markers: {\n        size: 0\n      },\n      grid: {\n        show: false,\n        padding: {\n          top: -20,\n          bottom: -20\n        }\n      }\n    };\n  if (_typeof(radarChartEl) !== undefined && radarChartEl !== null) {\n    var radarChart = new ApexCharts(radarChartEl, radarChartConfig);\n    radarChart.render();\n  }\n\n  // Donut Chart\n  // --------------------------------------------------------------------\n  var donutChartEl = document.querySelector('#donutChart'),\n    donutChartConfig = {\n      chart: {\n        height: 390,\n        type: 'donut'\n      },\n      labels: ['Operational', 'Networking', 'Hiring', 'R&D'],\n      series: [42, 7, 25, 25],\n      colors: [chartColors.donut.series1, chartColors.donut.series4, chartColors.donut.series3, chartColors.donut.series2],\n      stroke: {\n        show: false,\n        curve: 'straight'\n      },\n      dataLabels: {\n        enabled: true,\n        formatter: function formatter(val, opt) {\n          return parseInt(val, 10) + '%';\n        }\n      },\n      legend: {\n        show: true,\n        position: 'bottom',\n        markers: {\n          offsetX: -3\n        },\n        itemMargin: {\n          vertical: 3,\n          horizontal: 10\n        },\n        labels: {\n          colors: legendColor,\n          useSeriesColors: false\n        }\n      },\n      plotOptions: {\n        pie: {\n          donut: {\n            labels: {\n              show: true,\n              name: {\n                fontSize: '2rem',\n                fontFamily: 'Public Sans'\n              },\n              value: {\n                fontSize: '1.2rem',\n                color: legendColor,\n                fontFamily: 'Public Sans',\n                formatter: function formatter(val) {\n                  return parseInt(val, 10) + '%';\n                }\n              },\n              total: {\n                show: true,\n                fontSize: '1.5rem',\n                color: headingColor,\n                label: 'Operational',\n                formatter: function formatter(w) {\n                  return '42%';\n                }\n              }\n            }\n          }\n        }\n      },\n      responsive: [{\n        breakpoint: 992,\n        options: {\n          chart: {\n            height: 380\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              colors: legendColor,\n              useSeriesColors: false\n            }\n          }\n        }\n      }, {\n        breakpoint: 576,\n        options: {\n          chart: {\n            height: 320\n          },\n          plotOptions: {\n            pie: {\n              donut: {\n                labels: {\n                  show: true,\n                  name: {\n                    fontSize: '1.5rem'\n                  },\n                  value: {\n                    fontSize: '1rem'\n                  },\n                  total: {\n                    fontSize: '1.5rem'\n                  }\n                }\n              }\n            }\n          },\n          legend: {\n            position: 'bottom',\n            labels: {\n              colors: legendColor,\n              useSeriesColors: false\n            }\n          }\n        }\n      }, {\n        breakpoint: 420,\n        options: {\n          chart: {\n            height: 280\n          },\n          legend: {\n            show: false\n          }\n        }\n      }, {\n        breakpoint: 360,\n        options: {\n          chart: {\n            height: 250\n          },\n          legend: {\n            show: false\n          }\n        }\n      }]\n    };\n  if (_typeof(donutChartEl) !== undefined && donutChartEl !== null) {\n    var donutChart = new ApexCharts(donutChartEl, donutChartConfig);\n    donutChart.render();\n  }\n})();\n\n//# sourceURL=webpack://Sneat/./static/js/charts-apex.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/charts-apex.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});