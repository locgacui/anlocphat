/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/tables-datatables-basic.js":
/*!**********************************************!*\
  !*** ./static/js/tables-datatables-basic.js ***!
  \**********************************************/
/***/ (function() {

eval("/**\n * DataTables Basic\n */\n\n\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar fv, offCanvasEl;\ndocument.addEventListener('DOMContentLoaded', function (e) {\n  (function () {\n    var formAddNewRecord = document.getElementById('form-add-new-record');\n    setTimeout(function () {\n      var newRecord = document.querySelector('.create-new'),\n        offCanvasElement = document.querySelector('#add-new-record');\n\n      // To open offCanvas, to add new record\n      if (newRecord) {\n        newRecord.addEventListener('click', function () {\n          offCanvasEl = new bootstrap.Offcanvas(offCanvasElement);\n          // Empty fields on offCanvas open\n          offCanvasElement.querySelector('.dt-full-name').value = '', offCanvasElement.querySelector('.dt-post').value = '', offCanvasElement.querySelector('.dt-email').value = '', offCanvasElement.querySelector('.dt-date').value = '', offCanvasElement.querySelector('.dt-salary').value = '';\n          // Open offCanvas with form\n          offCanvasEl.show();\n        });\n      }\n    }, 200);\n\n    // Form validation for Add new record\n    fv = FormValidation.formValidation(formAddNewRecord, {\n      fields: {\n        basicFullname: {\n          validators: {\n            notEmpty: {\n              message: 'The name is required'\n            }\n          }\n        },\n        basicPost: {\n          validators: {\n            notEmpty: {\n              message: 'Post field is required'\n            }\n          }\n        },\n        basicEmail: {\n          validators: {\n            notEmpty: {\n              message: 'The Email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        },\n        basicDate: {\n          validators: {\n            notEmpty: {\n              message: 'Joining Date is required'\n            },\n            date: {\n              format: 'MM/DD/YYYY',\n              message: 'The value is not a valid date'\n            }\n          }\n        },\n        basicSalary: {\n          validators: {\n            notEmpty: {\n              message: 'Basic Salary is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap5: new FormValidation.plugins.Bootstrap5({\n          // Use this for enabling/changing valid/invalid class\n          // eleInvalidClass: '',\n          eleValidClass: '',\n          rowSelector: '.col-sm-12'\n        }),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        // defaultSubmit: new FormValidation.plugins.DefaultSubmit(),\n        autoFocus: new FormValidation.plugins.AutoFocus()\n      },\n      init: function init(instance) {\n        instance.on('plugins.message.placed', function (e) {\n          if (e.element.parentElement.classList.contains('input-group')) {\n            e.element.parentElement.insertAdjacentElement('afterend', e.messageElement);\n          }\n        });\n      }\n    });\n\n    // FlatPickr Initialization & Validation\n    var flatpickrDate = document.querySelector('[name=\"basicDate\"]');\n    if (flatpickrDate) {\n      flatpickrDate.flatpickr({\n        enableTime: false,\n        // See https://flatpickr.js.org/formatting/\n        dateFormat: 'm/d/Y',\n        // After selecting a date, we need to revalidate the field\n        onChange: function onChange() {\n          fv.revalidateField('basicDate');\n        }\n      });\n    }\n  })();\n});\n\n// datatable (jquery)\n$(function () {\n  var dt_basic_table = $('.datatables-basic'),\n    dt_complex_header_table = $('.dt-complex-header'),\n    dt_row_grouping_table = $('.dt-row-grouping'),\n    dt_multilingual_table = $('.dt-multilingual'),\n    dt_basic;\n\n  // DataTable with buttons\n  // --------------------------------------------------------------------\n\n  if (dt_basic_table.length) {\n    dt_basic = dt_basic_table.DataTable({\n      ajax: assetsPath + 'json/table-datatable.json',\n      columns: [{\n        data: ''\n      }, {\n        data: 'id'\n      }, {\n        data: 'id'\n      }, {\n        data: 'full_name'\n      }, {\n        data: 'email'\n      }, {\n        data: 'start_date'\n      }, {\n        data: 'salary'\n      }, {\n        data: 'status'\n      }, {\n        data: ''\n      }],\n      columnDefs: [{\n        // For Responsive\n        className: 'control',\n        orderable: false,\n        searchable: false,\n        responsivePriority: 2,\n        targets: 0,\n        render: function render(data, type, full, meta) {\n          return '';\n        }\n      }, _defineProperty({\n        // For Checkboxes\n        targets: 1,\n        orderable: false,\n        searchable: false,\n        responsivePriority: 3,\n        checkboxes: true,\n        render: function render() {\n          return '<input type=\"checkbox\" class=\"dt-checkboxes form-check-input\">';\n        }\n      }, \"checkboxes\", {\n        selectAllRender: '<input type=\"checkbox\" class=\"form-check-input\">'\n      }), {\n        targets: 2,\n        searchable: false,\n        visible: false\n      }, {\n        // Avatar image/badge, Name and post\n        targets: 3,\n        responsivePriority: 4,\n        render: function render(data, type, full, meta) {\n          var $user_img = full['avatar'],\n            $name = full['full_name'],\n            $post = full['post'];\n          if ($user_img) {\n            // For Avatar image\n            var $output = '<img src=\"' + assetsPath + 'img/avatars/' + $user_img + '\" alt=\"Avatar\" class=\"rounded-circle\">';\n          } else {\n            // For Avatar badge\n            var stateNum = Math.floor(Math.random() * 6);\n            var states = ['success', 'danger', 'warning', 'info', 'dark', 'primary', 'secondary'];\n            var $state = states[stateNum],\n              $name = full['full_name'],\n              $initials = $name.match(/\\b\\w/g) || [];\n            $initials = (($initials.shift() || '') + ($initials.pop() || '')).toUpperCase();\n            $output = '<span class=\"avatar-initial rounded-circle bg-label-' + $state + '\">' + $initials + '</span>';\n          }\n          // Creates full output for row\n          var $row_output = '<div class=\"d-flex justify-content-start align-items-center user-name\">' + '<div class=\"avatar-wrapper\">' + '<div class=\"avatar me-2\">' + $output + '</div>' + '</div>' + '<div class=\"d-flex flex-column\">' + '<span class=\"emp_name text-truncate\">' + $name + '</span>' + '<small class=\"emp_post text-truncate text-muted\">' + $post + '</small>' + '</div>' + '</div>';\n          return $row_output;\n        }\n      }, {\n        responsivePriority: 1,\n        targets: 4\n      }, {\n        // Label\n        targets: -2,\n        render: function render(data, type, full, meta) {\n          var $status_number = full['status'];\n          var $status = {\n            1: {\n              title: 'Current',\n              class: 'bg-label-primary'\n            },\n            2: {\n              title: 'Professional',\n              class: ' bg-label-success'\n            },\n            3: {\n              title: 'Rejected',\n              class: ' bg-label-danger'\n            },\n            4: {\n              title: 'Resigned',\n              class: ' bg-label-warning'\n            },\n            5: {\n              title: 'Applied',\n              class: ' bg-label-info'\n            }\n          };\n          if (typeof $status[$status_number] === 'undefined') {\n            return data;\n          }\n          return '<span class=\"badge ' + $status[$status_number].class + '\">' + $status[$status_number].title + '</span>';\n        }\n      }, {\n        // Actions\n        targets: -1,\n        title: 'Actions',\n        orderable: false,\n        searchable: false,\n        render: function render(data, type, full, meta) {\n          return '<div class=\"d-inline-block\">' + '<a href=\"javascript:;\" class=\"btn btn-sm btn-icon dropdown-toggle hide-arrow\" data-bs-toggle=\"dropdown\"><i class=\"bx bx-dots-vertical-rounded\"></i></a>' + '<ul class=\"dropdown-menu dropdown-menu-end m-0\">' + '<li><a href=\"javascript:;\" class=\"dropdown-item\">Details</a></li>' + '<li><a href=\"javascript:;\" class=\"dropdown-item\">Archive</a></li>' + '<div class=\"dropdown-divider\"></div>' + '<li><a href=\"javascript:;\" class=\"dropdown-item text-danger delete-record\">Delete</a></li>' + '</ul>' + '</div>' + '<a href=\"javascript:;\" class=\"btn btn-sm btn-icon item-edit\"><i class=\"bx bxs-edit\"></i></a>';\n        }\n      }],\n      order: [[2, 'desc']],\n      dom: '<\"card-header flex-column flex-md-row\"<\"head-label text-center\"><\"dt-action-buttons text-end pt-3 pt-md-0\"B>><\"row\"<\"col-sm-12 col-md-6\"l><\"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end\"f>>t<\"row\"<\"col-sm-12 col-md-6\"i><\"col-sm-12 col-md-6\"p>>',\n      displayLength: 7,\n      lengthMenu: [7, 10, 25, 50, 75, 100],\n      buttons: [{\n        extend: 'collection',\n        className: 'btn btn-label-primary dropdown-toggle me-2',\n        text: '<i class=\"bx bx-export me-sm-1\"></i> <span class=\"d-none d-sm-inline-block\">Export</span>',\n        buttons: [{\n          extend: 'print',\n          text: '<i class=\"bx bx-printer me-1\" ></i>Print',\n          className: 'dropdown-item',\n          exportOptions: {\n            columns: [3, 4, 5, 6, 7],\n            // prevent avatar to be display\n            format: {\n              body: function body(inner, coldex, rowdex) {\n                if (inner.length <= 0) return inner;\n                var el = $.parseHTML(inner);\n                var result = '';\n                $.each(el, function (index, item) {\n                  if (item.classList !== undefined && item.classList.contains('user-name')) {\n                    result = result + item.lastChild.firstChild.textContent;\n                  } else if (item.innerText === undefined) {\n                    result = result + item.textContent;\n                  } else result = result + item.innerText;\n                });\n                return result;\n              }\n            }\n          },\n          customize: function customize(win) {\n            //customize print view for dark\n            $(win.document.body).css('color', config.colors.headingColor).css('border-color', config.colors.borderColor).css('background-color', config.colors.bodyBg);\n            $(win.document.body).find('table').addClass('compact').css('color', 'inherit').css('border-color', 'inherit').css('background-color', 'inherit');\n          }\n        }, {\n          extend: 'csv',\n          text: '<i class=\"bx bx-file me-1\" ></i>Csv',\n          className: 'dropdown-item',\n          exportOptions: {\n            columns: [3, 4, 5, 6, 7],\n            // prevent avatar to be display\n            format: {\n              body: function body(inner, coldex, rowdex) {\n                if (inner.length <= 0) return inner;\n                var el = $.parseHTML(inner);\n                var result = '';\n                $.each(el, function (index, item) {\n                  if (item.classList !== undefined && item.classList.contains('user-name')) {\n                    result = result + item.lastChild.firstChild.textContent;\n                  } else if (item.innerText === undefined) {\n                    result = result + item.textContent;\n                  } else result = result + item.innerText;\n                });\n                return result;\n              }\n            }\n          }\n        }, {\n          extend: 'excel',\n          text: '<i class=\"bx bxs-file-export me-1\"></i>Excel',\n          className: 'dropdown-item',\n          exportOptions: {\n            columns: [3, 4, 5, 6, 7],\n            // prevent avatar to be display\n            format: {\n              body: function body(inner, coldex, rowdex) {\n                if (inner.length <= 0) return inner;\n                var el = $.parseHTML(inner);\n                var result = '';\n                $.each(el, function (index, item) {\n                  if (item.classList !== undefined && item.classList.contains('user-name')) {\n                    result = result + item.lastChild.firstChild.textContent;\n                  } else if (item.innerText === undefined) {\n                    result = result + item.textContent;\n                  } else result = result + item.innerText;\n                });\n                return result;\n              }\n            }\n          }\n        }, {\n          extend: 'pdf',\n          text: '<i class=\"bx bxs-file-pdf me-1\"></i>Pdf',\n          className: 'dropdown-item',\n          exportOptions: {\n            columns: [3, 4, 5, 6, 7],\n            // prevent avatar to be display\n            format: {\n              body: function body(inner, coldex, rowdex) {\n                if (inner.length <= 0) return inner;\n                var el = $.parseHTML(inner);\n                var result = '';\n                $.each(el, function (index, item) {\n                  if (item.classList !== undefined && item.classList.contains('user-name')) {\n                    result = result + item.lastChild.firstChild.textContent;\n                  } else if (item.innerText === undefined) {\n                    result = result + item.textContent;\n                  } else result = result + item.innerText;\n                });\n                return result;\n              }\n            }\n          }\n        }, {\n          extend: 'copy',\n          text: '<i class=\"bx bx-copy me-1\" ></i>Copy',\n          className: 'dropdown-item',\n          exportOptions: {\n            columns: [3, 4, 5, 6, 7],\n            // prevent avatar to be display\n            format: {\n              body: function body(inner, coldex, rowdex) {\n                if (inner.length <= 0) return inner;\n                var el = $.parseHTML(inner);\n                var result = '';\n                $.each(el, function (index, item) {\n                  if (item.classList !== undefined && item.classList.contains('user-name')) {\n                    result = result + item.lastChild.firstChild.textContent;\n                  } else if (item.innerText === undefined) {\n                    result = result + item.textContent;\n                  } else result = result + item.innerText;\n                });\n                return result;\n              }\n            }\n          }\n        }]\n      }, {\n        text: '<i class=\"bx bx-plus me-sm-1\"></i> <span class=\"d-none d-sm-inline-block\">Add New Record</span>',\n        className: 'create-new btn btn-primary'\n      }],\n      responsive: {\n        details: {\n          display: $.fn.dataTable.Responsive.display.modal({\n            header: function header(row) {\n              var data = row.data();\n              return 'Details of ' + data['full_name'];\n            }\n          }),\n          type: 'column',\n          renderer: function renderer(api, rowIdx, columns) {\n            var data = $.map(columns, function (col, i) {\n              return col.title !== '' // ? Do not show row in modal popup if title is blank (for check box)\n              ? '<tr data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<td>' + col.title + ':' + '</td> ' + '<td>' + col.data + '</td>' + '</tr>' : '';\n            }).join('');\n            return data ? $('<table class=\"table\"/><tbody />').append(data) : false;\n          }\n        }\n      }\n    });\n    $('div.head-label').html('<h5 class=\"card-title mb-0\">DataTable with Buttons</h5>');\n    // To remove default btn-secondary in export buttons\n    $('.dt-buttons > .btn-group > button').removeClass('btn-secondary');\n  }\n\n  // Add New record\n  // ? Remove/Update this code as per your requirements\n  var count = 101;\n  // On form submit, if form is valid\n  fv.on('core.form.valid', function () {\n    var $new_name = $('.add-new-record .dt-full-name').val(),\n      $new_post = $('.add-new-record .dt-post').val(),\n      $new_email = $('.add-new-record .dt-email').val(),\n      $new_date = $('.add-new-record .dt-date').val(),\n      $new_salary = $('.add-new-record .dt-salary').val();\n    if ($new_name != '') {\n      dt_basic.row.add({\n        id: count,\n        full_name: $new_name,\n        post: $new_post,\n        email: $new_email,\n        start_date: $new_date,\n        salary: '$' + $new_salary,\n        status: 5\n      }).draw();\n      count++;\n\n      // Hide offcanvas using javascript method\n      offCanvasEl.hide();\n    }\n  });\n\n  // Delete Record\n  $('.datatables-basic tbody').on('click', '.delete-record', function () {\n    dt_basic.row($(this).parents('tr')).remove().draw();\n  });\n\n  // Complex Header DataTable\n  // --------------------------------------------------------------------\n\n  if (dt_complex_header_table.length) {\n    var dt_complex = dt_complex_header_table.DataTable({\n      ajax: assetsPath + 'json/table-datatable.json',\n      columns: [{\n        data: 'full_name'\n      }, {\n        data: 'email'\n      }, {\n        data: 'city'\n      }, {\n        data: 'post'\n      }, {\n        data: 'salary'\n      }, {\n        data: 'status'\n      }, {\n        data: ''\n      }],\n      columnDefs: [{\n        // Label\n        targets: -2,\n        render: function render(data, type, full, meta) {\n          var $status_number = full['status'];\n          var $status = {\n            1: {\n              title: 'Current',\n              class: 'bg-label-primary'\n            },\n            2: {\n              title: 'Professional',\n              class: ' bg-label-success'\n            },\n            3: {\n              title: 'Rejected',\n              class: ' bg-label-danger'\n            },\n            4: {\n              title: 'Resigned',\n              class: ' bg-label-warning'\n            },\n            5: {\n              title: 'Applied',\n              class: ' bg-label-info'\n            }\n          };\n          if (typeof $status[$status_number] === 'undefined') {\n            return data;\n          }\n          return '<span class=\"badge ' + $status[$status_number].class + '\">' + $status[$status_number].title + '</span>';\n        }\n      }, {\n        // Actions\n        targets: -1,\n        title: 'Actions',\n        orderable: false,\n        render: function render(data, type, full, meta) {\n          return '<div class=\"d-inline-block\">' + '<a href=\"javascript:;\" class=\"btn btn-sm btn-icon dropdown-toggle hide-arrow\" data-bs-toggle=\"dropdown\"><i class=\"bx bx-dots-vertical-rounded\"></i></a>' + '<div class=\"dropdown-menu dropdown-menu-end m-0\">' + '<a href=\"javascript:;\" class=\"dropdown-item\">Details</a>' + '<a href=\"javascript:;\" class=\"dropdown-item\">Archive</a>' + '<div class=\"dropdown-divider\"></div>' + '<a href=\"javascript:;\" class=\"dropdown-item text-danger delete-record\">Delete</a>' + '</div>' + '</div>' + '<a href=\"javascript:;\" class=\"btn btn-sm btn-icon item-edit\"><i class=\"bx bxs-edit\"></i></a>';\n        }\n      }],\n      dom: '<\"row\"<\"col-sm-12 col-md-6\"l><\"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end\"f>><\"table-responsive\"t><\"row\"<\"col-sm-12 col-md-6\"i><\"col-sm-12 col-md-6\"p>>',\n      displayLength: 7,\n      lengthMenu: [7, 10, 25, 50, 75, 100]\n    });\n  }\n\n  // Row Grouping\n  // --------------------------------------------------------------------\n\n  var groupColumn = 2;\n  if (dt_row_grouping_table.length) {\n    var groupingTable = dt_row_grouping_table.DataTable({\n      ajax: assetsPath + 'json/table-datatable.json',\n      columns: [{\n        data: ''\n      }, {\n        data: 'full_name'\n      }, {\n        data: 'post'\n      }, {\n        data: 'email'\n      }, {\n        data: 'city'\n      }, {\n        data: 'start_date'\n      }, {\n        data: 'salary'\n      }, {\n        data: 'status'\n      }, {\n        data: ''\n      }],\n      columnDefs: [{\n        // For Responsive\n        className: 'control',\n        orderable: false,\n        targets: 0,\n        searchable: false,\n        render: function render(data, type, full, meta) {\n          return '';\n        }\n      }, {\n        visible: false,\n        targets: groupColumn\n      }, {\n        // Label\n        targets: -2,\n        render: function render(data, type, full, meta) {\n          var $status_number = full['status'];\n          var $status = {\n            1: {\n              title: 'Current',\n              class: 'bg-label-primary'\n            },\n            2: {\n              title: 'Professional',\n              class: ' bg-label-success'\n            },\n            3: {\n              title: 'Rejected',\n              class: ' bg-label-danger'\n            },\n            4: {\n              title: 'Resigned',\n              class: ' bg-label-warning'\n            },\n            5: {\n              title: 'Applied',\n              class: ' bg-label-info'\n            }\n          };\n          if (typeof $status[$status_number] === 'undefined') {\n            return data;\n          }\n          return '<span class=\"badge ' + $status[$status_number].class + '\">' + $status[$status_number].title + '</span>';\n        }\n      }, {\n        // Actions\n        targets: -1,\n        title: 'Actions',\n        orderable: false,\n        searchable: false,\n        render: function render(data, type, full, meta) {\n          return '<div class=\"d-inline-block\">' + '<a href=\"javascript:;\" class=\"btn btn-sm btn-icon dropdown-toggle hide-arrow\" data-bs-toggle=\"dropdown\"><i class=\"bx bx-dots-vertical-rounded\"></i></a>' + '<div class=\"dropdown-menu dropdown-menu-end m-0\">' + '<a href=\"javascript:;\" class=\"dropdown-item\">Details</a>' + '<a href=\"javascript:;\" class=\"dropdown-item\">Archive</a>' + '<div class=\"dropdown-divider\"></div>' + '<a href=\"javascript:;\" class=\"dropdown-item text-danger delete-record\">Delete</a>' + '</div>' + '</div>' + '<a href=\"javascript:;\" class=\"btn btn-sm btn-icon item-edit\"><i class=\"bx bxs-edit\"></i></a>';\n        }\n      }],\n      order: [[groupColumn, 'asc']],\n      dom: '<\"row\"<\"col-sm-12 col-md-6\"l><\"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end\"f>>t<\"row\"<\"col-sm-12 col-md-6\"i><\"col-sm-12 col-md-6\"p>>',\n      displayLength: 7,\n      lengthMenu: [7, 10, 25, 50, 75, 100],\n      drawCallback: function drawCallback(settings) {\n        var api = this.api();\n        var rows = api.rows({\n          page: 'current'\n        }).nodes();\n        var last = null;\n        api.column(groupColumn, {\n          page: 'current'\n        }).data().each(function (group, i) {\n          if (last !== group) {\n            $(rows).eq(i).before('<tr class=\"group\"><td colspan=\"8\">' + group + '</td></tr>');\n            last = group;\n          }\n        });\n      },\n      responsive: {\n        details: {\n          display: $.fn.dataTable.Responsive.display.modal({\n            header: function header(row) {\n              var data = row.data();\n              return 'Details of ' + data['full_name'];\n            }\n          }),\n          type: 'column',\n          renderer: function renderer(api, rowIdx, columns) {\n            var data = $.map(columns, function (col, i) {\n              return col.title !== '' // ? Do not show row in modal popup if title is blank (for check box)\n              ? '<tr data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<td>' + col.title + ':' + '</td> ' + '<td>' + col.data + '</td>' + '</tr>' : '';\n            }).join('');\n            return data ? $('<table class=\"table\"/><tbody />').append(data) : false;\n          }\n        }\n      }\n    });\n\n    // Order by the grouping\n    $('.dt-row-grouping tbody').on('click', 'tr.group', function () {\n      var currentOrder = groupingTable.order()[0];\n      if (currentOrder[0] === groupColumn && currentOrder[1] === 'asc') {\n        groupingTable.order([groupColumn, 'desc']).draw();\n      } else {\n        groupingTable.order([groupColumn, 'asc']).draw();\n      }\n    });\n  }\n\n  // Multilingual DataTable\n  // --------------------------------------------------------------------\n\n  var lang = 'German';\n  if (dt_multilingual_table.length) {\n    var table_language = dt_multilingual_table.DataTable({\n      ajax: assetsPath + 'json/table-datatable.json',\n      columns: [{\n        data: ''\n      }, {\n        data: 'full_name'\n      }, {\n        data: 'post'\n      }, {\n        data: 'email'\n      }, {\n        data: 'start_date'\n      }, {\n        data: 'salary'\n      }, {\n        data: 'status'\n      }, {\n        data: ''\n      }],\n      columnDefs: [{\n        // For Responsive\n        className: 'control',\n        orderable: false,\n        targets: 0,\n        searchable: false,\n        render: function render(data, type, full, meta) {\n          return '';\n        }\n      }, {\n        // Label\n        targets: -2,\n        render: function render(data, type, full, meta) {\n          var $status_number = full['status'];\n          var $status = {\n            1: {\n              title: 'Current',\n              class: 'bg-label-primary'\n            },\n            2: {\n              title: 'Professional',\n              class: ' bg-label-success'\n            },\n            3: {\n              title: 'Rejected',\n              class: ' bg-label-danger'\n            },\n            4: {\n              title: 'Resigned',\n              class: ' bg-label-warning'\n            },\n            5: {\n              title: 'Applied',\n              class: ' bg-label-info'\n            }\n          };\n          if (typeof $status[$status_number] === 'undefined') {\n            return data;\n          }\n          return '<span class=\"badge ' + $status[$status_number].class + '\">' + $status[$status_number].title + '</span>';\n        }\n      }, {\n        // Actions\n        targets: -1,\n        title: 'Actions',\n        orderable: false,\n        searchable: false,\n        render: function render(data, type, full, meta) {\n          return '<div class=\"d-inline-block\">' + '<a href=\"javascript:;\" class=\"btn btn-sm btn-icon dropdown-toggle hide-arrow\" data-bs-toggle=\"dropdown\"><i class=\"bx bx-dots-vertical-rounded\"></i></a>' + '<div class=\"dropdown-menu dropdown-menu-end m-0\">' + '<a href=\"javascript:;\" class=\"dropdown-item\">Details</a>' + '<a href=\"javascript:;\" class=\"dropdown-item\">Archive</a>' + '<div class=\"dropdown-divider\"></div>' + '<a href=\"javascript:;\" class=\"dropdown-item text-danger delete-record\">Delete</a>' + '</div>' + '</div>' + '<a href=\"javascript:;\" class=\"btn btn-sm btn-icon item-edit\"><i class=\"bx bxs-edit\"></i></a>';\n        }\n      }],\n      language: {\n        url: '//cdn.datatables.net/plug-ins/9dcbecd42ad/i18n/' + lang + '.json'\n      },\n      displayLength: 7,\n      dom: '<\"row\"<\"col-sm-12 col-md-6\"l><\"col-sm-12 col-md-6 d-flex justify-content-center justify-content-md-end\"f>>t<\"row\"<\"col-sm-12 col-md-6\"i><\"col-sm-12 col-md-6\"p>>',\n      lengthMenu: [7, 10, 25, 50, 75, 100],\n      responsive: {\n        details: {\n          display: $.fn.dataTable.Responsive.display.modal({\n            header: function header(row) {\n              var data = row.data();\n              return 'Details of ' + data['full_name'];\n            }\n          }),\n          type: 'column',\n          renderer: function renderer(api, rowIdx, columns) {\n            var data = $.map(columns, function (col, i) {\n              return col.title !== '' // ? Do not show row in modal popup if title is blank (for check box)\n              ? '<tr data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<td>' + col.title + ':' + '</td> ' + '<td>' + col.data + '</td>' + '</tr>' : '';\n            }).join('');\n            return data ? $('<table class=\"table\"/><tbody />').append(data) : false;\n          }\n        }\n      }\n    });\n  }\n\n  // Filter form control to default size\n  // ? setTimeout used for multilingual table initialization\n  setTimeout(function () {\n    $('.dataTables_filter .form-control').removeClass('form-control-sm');\n    $('.dataTables_length .form-select').removeClass('form-select-sm');\n  }, 300);\n});\n\n//# sourceURL=webpack://Sneat/./static/js/tables-datatables-basic.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/tables-datatables-basic.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});