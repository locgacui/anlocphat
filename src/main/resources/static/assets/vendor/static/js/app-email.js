/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/app-email.js":
/*!********************************!*\
  !*** ./static/js/app-email.js ***!
  \********************************/
/***/ (function() {

eval("/**\n * App Email\n */\n\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  (function () {\n    var emailList = document.querySelector('.email-list'),\n      emailListItems = [].slice.call(document.querySelectorAll('.email-list-item')),\n      emailListItemInputs = [].slice.call(document.querySelectorAll('.email-list-item-input')),\n      emailView = document.querySelector('.app-email-view-content'),\n      emailFilters = document.querySelector('.email-filters'),\n      emailFilterByFolders = [].slice.call(document.querySelectorAll('.email-filter-folders li')),\n      emailEditor = document.querySelector('.email-editor'),\n      appEmailSidebar = document.querySelector('.app-email-sidebar'),\n      appOverlay = document.querySelector('.app-overlay'),\n      emailReplyEditor = document.querySelector('.email-reply-editor'),\n      bookmarkEmail = [].slice.call(document.querySelectorAll('.email-list-item-bookmark')),\n      selectAllEmails = document.getElementById('email-select-all'),\n      emailSearch = document.querySelector('.email-search-input'),\n      toggleCC = document.querySelector('.email-compose-toggle-cc'),\n      toggleBCC = document.querySelector('.email-compose-toggle-bcc'),\n      emailCompose = document.querySelector('.app-email-compose'),\n      emailListDelete = document.querySelector('.email-list-delete'),\n      emailListRead = document.querySelector('.email-list-read'),\n      emailListEmpty = document.querySelector('.email-list-empty'),\n      refreshEmails = document.querySelector('.email-refresh'),\n      emailViewContainer = document.getElementById('app-email-view'),\n      emailFilterFolderLists = [].slice.call(document.querySelectorAll('.email-filter-folders li')),\n      emailListItemActions = [].slice.call(document.querySelectorAll('.email-list-item-actions li'));\n\n    // Initialize PerfectScrollbar\n    // ------------------------------\n    // Email list scrollbar\n    if (emailList) {\n      var emailListInstance = new PerfectScrollbar(emailList, {\n        wheelPropagation: false,\n        suppressScrollX: true\n      });\n    }\n\n    // Sidebar tags scrollbar\n    if (emailFilters) {\n      new PerfectScrollbar(emailFilters, {\n        wheelPropagation: false,\n        suppressScrollX: true\n      });\n    }\n\n    // Email view scrollbar\n    if (emailView) {\n      new PerfectScrollbar(emailView, {\n        wheelPropagation: false,\n        suppressScrollX: true\n      });\n    }\n\n    // Initialize Quill Editor\n    // ------------------------------\n    if (emailEditor) {\n      new Quill('.email-editor', {\n        modules: {\n          toolbar: '.email-editor-toolbar'\n        },\n        placeholder: 'Message... ',\n        theme: 'snow'\n      });\n    }\n    if (emailReplyEditor) {\n      new Quill('.email-reply-editor', {\n        modules: {\n          toolbar: '.email-reply-toolbar'\n        },\n        placeholder: 'Write your message... ',\n        theme: 'snow'\n      });\n    }\n\n    // Bookmark email\n    if (bookmarkEmail) {\n      bookmarkEmail.forEach(function (emailItem) {\n        emailItem.addEventListener('click', function (e) {\n          var emailItem = e.currentTarget.parentNode.parentNode;\n          var starredAttr = emailItem.getAttribute('data-starred');\n          e.stopPropagation();\n          if (!starredAttr) {\n            emailItem.setAttribute('data-starred', 'true');\n          } else {\n            emailItem.removeAttribute('data-starred');\n          }\n        });\n      });\n    }\n\n    // Select all\n    if (selectAllEmails) {\n      selectAllEmails.addEventListener('click', function (e) {\n        if (e.currentTarget.checked) {\n          emailListItemInputs.forEach(function (c) {\n            return c.checked = 1;\n          });\n        } else {\n          emailListItemInputs.forEach(function (c) {\n            return c.checked = 0;\n          });\n        }\n      });\n    }\n\n    // Select single email\n    if (emailListItemInputs) {\n      emailListItemInputs.forEach(function (emailListItemInput) {\n        emailListItemInput.addEventListener('click', function (e) {\n          e.stopPropagation();\n          // Check input count to reset the indeterminate state\n          var emailListItemInputCount = 0;\n          emailListItemInputs.forEach(function (emailListItemInput) {\n            if (emailListItemInput.checked) {\n              emailListItemInputCount++;\n            }\n          });\n          if (emailListItemInputCount < emailListItemInputs.length) {\n            if (emailListItemInputCount == 0) {\n              selectAllEmails.indeterminate = false;\n            } else {\n              selectAllEmails.indeterminate = true;\n            }\n          } else {\n            if (emailListItemInputCount == emailListItemInputs.length) {\n              selectAllEmails.indeterminate = false;\n              selectAllEmails.checked = true;\n            } else {\n              selectAllEmails.indeterminate = false;\n            }\n          }\n        });\n      });\n    }\n\n    // Search email based on searched text\n    if (emailSearch) {\n      emailSearch.addEventListener('keyup', function (e) {\n        var searchValue = e.currentTarget.value.toLowerCase(),\n          searchEmailListItems = {},\n          selectedFolderFilter = document.querySelector('.email-filter-folders .active').getAttribute('data-target');\n\n        // Filter emails based on selected folders\n        if (selectedFolderFilter != 'inbox') {\n          searchEmailListItems = [].slice.call(document.querySelectorAll('.email-list-item[data-' + selectedFolderFilter + '=\"true\"]'));\n        } else {\n          searchEmailListItems = [].slice.call(document.querySelectorAll('.email-list-item'));\n        }\n\n        // console.log(searchValue);\n        searchEmailListItems.forEach(function (searchEmailListItem) {\n          var searchEmailListItemText = searchEmailListItem.textContent.toLowerCase();\n          if (searchValue) {\n            if (-1 < searchEmailListItemText.indexOf(searchValue)) {\n              searchEmailListItem.classList.add('d-block');\n            } else {\n              searchEmailListItem.classList.add('d-none');\n            }\n          } else {\n            searchEmailListItem.classList.remove('d-none');\n          }\n        });\n      });\n    }\n\n    // Filter based on folder type (Inbox, Sent, Draft etc...)\n    emailFilterByFolders.forEach(function (emailFilterByFolder) {\n      emailFilterByFolder.addEventListener('click', function (e) {\n        var currentTarget = e.currentTarget,\n          currentTargetData = currentTarget.getAttribute('data-target');\n        appEmailSidebar.classList.remove('show');\n        appOverlay.classList.remove('show');\n\n        // Remove active class from each folder filters\n        Helpers._removeClass('active', emailFilterByFolders);\n        // Add active class to selected folder filters\n        currentTarget.classList.add('active');\n        emailListItems.forEach(function (emailListItem) {\n          // If folder filter is Inbox\n          if (currentTargetData == 'inbox') {\n            emailListItem.classList.add('d-block');\n            emailListItem.classList.remove('d-none');\n          } else if (emailListItem.hasAttribute('data-' + currentTargetData)) {\n            emailListItem.classList.add('d-block');\n            emailListItem.classList.remove('d-none');\n          } else {\n            emailListItem.classList.add('d-none');\n            emailListItem.classList.remove('d-block');\n          }\n        });\n      });\n    });\n\n    // Toggle CC/BCC input\n    if (toggleBCC) {\n      toggleBCC.addEventListener('click', function (e) {\n        Helpers._toggleClass(document.querySelector('.email-compose-bcc'), 'd-block', 'd-none');\n      });\n    }\n    if (toggleCC) {\n      toggleCC.addEventListener('click', function (e) {\n        Helpers._toggleClass(document.querySelector('.email-compose-cc'), 'd-block', 'd-none');\n      });\n    }\n\n    // Empty compose email message inputs when modal is hidden\n    emailCompose.addEventListener('hidden.bs.modal', function (event) {\n      document.querySelector('.email-editor .ql-editor').innerHTML = '';\n      $('#emailContacts').val('');\n      initSelect2();\n    });\n\n    // Delete multiple email\n    if (emailListDelete) {\n      emailListDelete.addEventListener('click', function (e) {\n        emailListItemInputs.forEach(function (emailListItemInput) {\n          if (emailListItemInput.checked) {\n            emailListItemInput.parentNode.closest('li.email-list-item').remove();\n          }\n        });\n        selectAllEmails.indeterminate = false;\n        selectAllEmails.checked = false;\n        var emailListItem = document.querySelectorAll('.email-list-item');\n        if (emailListItem.length == 0) {\n          emailListEmpty.classList.remove('d-none');\n        }\n      });\n    }\n\n    // Mark as read\n    if (emailListRead) {\n      emailListRead.addEventListener('click', function (e) {\n        emailListItemInputs.forEach(function (emailListItemInput) {\n          if (emailListItemInput.checked) {\n            emailListItemInput.checked = false;\n            emailListItemInput.parentNode.closest('li.email-list-item').classList.add('email-marked-read');\n            var emailItemEnvelop = emailListItemInput.parentNode.closest('li.email-list-item').querySelector('.email-list-item-actions li');\n            if (Helpers._hasClass('email-read', emailItemEnvelop)) {\n              emailItemEnvelop.classList.remove('email-read');\n              emailItemEnvelop.classList.add('email-unread');\n              emailItemEnvelop.querySelector('i').classList.remove('bx-envelope-open');\n              emailItemEnvelop.querySelector('i').classList.add('bx-envelope');\n            }\n          }\n        });\n        selectAllEmails.indeterminate = false;\n        selectAllEmails.checked = false;\n      });\n    }\n\n    // Refresh Mails\n\n    if (refreshEmails && emailList) {\n      var emailListJq = $('.email-list'),\n        _emailListInstance = new PerfectScrollbar(emailList, {\n          wheelPropagation: false,\n          suppressScrollX: true\n        });\n      // ? Using jquery vars due to BlockUI jQuery dependency\n      refreshEmails.addEventListener('click', function (e) {\n        emailListJq.block({\n          message: '<div class=\"spinner-border text-primary\" role=\"status\"></div>',\n          timeout: 1000,\n          css: {\n            backgroundColor: 'transparent',\n            border: '0'\n          },\n          overlayCSS: {\n            backgroundColor: '#000',\n            opacity: 0.1\n          },\n          onBlock: function onBlock() {\n            _emailListInstance.settings.suppressScrollY = true;\n          },\n          onUnblock: function onUnblock() {\n            _emailListInstance.settings.suppressScrollY = false;\n          }\n        });\n      });\n    }\n\n    // Earlier msgs\n    // ? Using jquery vars due to jQuery animation (slideToggle) dependency\n    var earlierMsg = $('.email-earlier-msgs');\n    if (earlierMsg.length) {\n      earlierMsg.on('click', function () {\n        var $this = $(this);\n        $this.parents().find('.email-card-last').addClass('hide-pseudo');\n        $this.next('.email-card-prev').slideToggle();\n        $this.remove();\n      });\n    }\n\n    // Email contacts (select2)\n    // ? Using jquery vars due to select2 jQuery dependency\n    var emailContacts = $('#emailContacts');\n    function initSelect2() {\n      if (emailContacts.length) {\n        var renderContactsAvatar = function renderContactsAvatar(option) {\n          if (!option.id) {\n            return option.text;\n          }\n          var $avatar = \"<div class='d-flex flex-wrap align-items-center'>\" + \"<div class='avatar avatar-xs me-2 w-px-20 h-px-20'>\" + \"<img src='\" + assetsPath + 'img/avatars/' + $(option.element).data('avatar') + \"' alt='avatar' class='rounded-circle' />\" + '</div>' + option.text + '</div>';\n          return $avatar;\n        };\n        emailContacts.wrap('<div class=\"position-relative\"></div>').select2({\n          placeholder: 'Select value',\n          dropdownParent: emailContacts.parent(),\n          closeOnSelect: false,\n          templateResult: renderContactsAvatar,\n          templateSelection: renderContactsAvatar,\n          escapeMarkup: function escapeMarkup(es) {\n            return es;\n          }\n        });\n      }\n    }\n    initSelect2();\n\n    // Scroll to bottom on reply click\n    // ? Using jquery vars due to jQuery animation dependency\n    var emailViewContent = $('.app-email-view-content');\n    emailViewContent.find('.scroll-to-reply').on('click', function () {\n      if (emailViewContent[0].scrollTop === 0) {\n        emailViewContent.animate({\n          scrollTop: emailViewContent[0].scrollHeight\n        }, 1500);\n      }\n    });\n\n    // Close view on email filter folder list click\n    if (emailFilterFolderLists) {\n      emailFilterFolderLists.forEach(function (emailFilterFolderList) {\n        emailFilterFolderList.addEventListener('click', function (e) {\n          emailViewContainer.classList.remove('show');\n        });\n      });\n    }\n\n    // Email List Items Actions\n    if (emailListItemActions) {\n      emailListItemActions.forEach(function (emailListItemAction) {\n        emailListItemAction.addEventListener('click', function (e) {\n          e.stopPropagation();\n          var currentTarget = e.currentTarget;\n          if (Helpers._hasClass('email-delete', currentTarget)) {\n            currentTarget.parentNode.closest('li.email-list-item').remove();\n            var emailListItem = document.querySelectorAll('.email-list-item');\n            if (emailListItem.length == 0) {\n              emailListEmpty.classList.remove('d-none');\n            }\n          } else if (Helpers._hasClass('email-read', currentTarget)) {\n            currentTarget.parentNode.closest('li.email-list-item').classList.add('email-marked-read');\n            Helpers._toggleClass(currentTarget, 'email-read', 'email-unread');\n            Helpers._toggleClass(currentTarget.querySelector('i'), 'bx-envelope-open', 'bx-envelope');\n          } else if (Helpers._hasClass('email-unread', currentTarget)) {\n            currentTarget.parentNode.closest('li.email-list-item').classList.remove('email-marked-read');\n            Helpers._toggleClass(currentTarget, 'email-read', 'email-unread');\n            Helpers._toggleClass(currentTarget.querySelector('i'), 'bx-envelope-open', 'bx-envelope');\n          }\n        });\n      });\n    }\n  })();\n});\n\n//# sourceURL=webpack://Sneat/./static/js/app-email.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/app-email.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});